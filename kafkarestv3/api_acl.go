// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*
 * Kafka HTTP API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 3.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package kafkarestv3

import (
	_context "context"
	"github.com/antihax/optional"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type ACLApi interface {

	/*
	 * ClustersClusterIdAclsDelete Delete ACLs
	 *
	 * Deletes the list of ACLs that matches the search criteria.
	 *
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param clusterId The Kafka cluster ID.
	 * @param optional nil or *ClustersClusterIdAclsDeleteOpts - Optional Parameters:
	 * @param "ResourceType" (optional.Interface of AclResourceType) -  The ACL resource type.
	 * @param "ResourceName" (optional.String) -  The ACL resource name.
	 * @param "PatternType" (optional.Interface of AclPatternType) -  The ACL pattern type.
	 * @param "Principal" (optional.String) -  The ACL principal.
	 * @param "Host" (optional.String) -  The ACL host.
	 * @param "Operation" (optional.Interface of AclOperation) -  The ACL operation.
	 * @param "Permission" (optional.Interface of AclPermission) -  The ACL permission.
	 * @return InlineResponse200
	 */
	ClustersClusterIdAclsDelete(ctx _context.Context, clusterId string, localVarOptionals *ClustersClusterIdAclsDeleteOpts) (InlineResponse200, *_nethttp.Response, error)

	/*
	 * ClustersClusterIdAclsGet Search ACLs
	 *
	 * Returns a list of ACLs that match the search criteria.
	 *
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param clusterId The Kafka cluster ID.
	 * @param optional nil or *ClustersClusterIdAclsGetOpts - Optional Parameters:
	 * @param "ResourceType" (optional.Interface of AclResourceType) -  The ACL resource type.
	 * @param "ResourceName" (optional.String) -  The ACL resource name.
	 * @param "PatternType" (optional.Interface of AclPatternType) -  The ACL pattern type.
	 * @param "Principal" (optional.String) -  The ACL principal.
	 * @param "Host" (optional.String) -  The ACL host.
	 * @param "Operation" (optional.Interface of AclOperation) -  The ACL operation.
	 * @param "Permission" (optional.Interface of AclPermission) -  The ACL permission.
	 * @return AclDataList
	 */
	ClustersClusterIdAclsGet(ctx _context.Context, clusterId string, localVarOptionals *ClustersClusterIdAclsGetOpts) (AclDataList, *_nethttp.Response, error)

	/*
	 * ClustersClusterIdAclsPost Create ACLs
	 *
	 * Creates an ACL.
	 *
	 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 * @param clusterId The Kafka cluster ID.
	 * @param optional nil or *ClustersClusterIdAclsPostOpts - Optional Parameters:
	 * @param "CreateAclRequestData" (optional.Interface of CreateAclRequestData) -  The ACL creation request.
	 */
	ClustersClusterIdAclsPost(ctx _context.Context, clusterId string, localVarOptionals *ClustersClusterIdAclsPostOpts) (*_nethttp.Response, error)
}

// ACLApiService ACLApi service
type ACLApiService service

// ClustersClusterIdAclsDeleteOpts Optional parameters for the method 'ClustersClusterIdAclsDelete'
type ClustersClusterIdAclsDeleteOpts struct {
	ResourceType optional.Interface
	ResourceName optional.String
	PatternType  optional.Interface
	Principal    optional.String
	Host         optional.String
	Operation    optional.Interface
	Permission   optional.Interface
}

/*
 * ClustersClusterIdAclsDelete Delete ACLs
 *
 * Deletes the list of ACLs that matches the search criteria.
 *
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param clusterId The Kafka cluster ID.
 * @param optional nil or *ClustersClusterIdAclsDeleteOpts - Optional Parameters:
 * @param "ResourceType" (optional.Interface of AclResourceType) -  The ACL resource type.
 * @param "ResourceName" (optional.String) -  The ACL resource name.
 * @param "PatternType" (optional.Interface of AclPatternType) -  The ACL pattern type.
 * @param "Principal" (optional.String) -  The ACL principal.
 * @param "Host" (optional.String) -  The ACL host.
 * @param "Operation" (optional.Interface of AclOperation) -  The ACL operation.
 * @param "Permission" (optional.Interface of AclPermission) -  The ACL permission.
 * @return InlineResponse200
 */
func (a *ACLApiService) ClustersClusterIdAclsDelete(ctx _context.Context, clusterId string, localVarOptionals *ClustersClusterIdAclsDeleteOpts) (InlineResponse200, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  InlineResponse200
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/clusters/{cluster_id}/acls"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", _neturl.PathEscape(parameterToString(clusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.ResourceType.IsSet() {
		localVarQueryParams.Add("resource_type", parameterToString(localVarOptionals.ResourceType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ResourceName.IsSet() {
		localVarQueryParams.Add("resource_name", parameterToString(localVarOptionals.ResourceName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PatternType.IsSet() {
		localVarQueryParams.Add("pattern_type", parameterToString(localVarOptionals.PatternType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Principal.IsSet() {
		localVarQueryParams.Add("principal", parameterToString(localVarOptionals.Principal.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Host.IsSet() {
		localVarQueryParams.Add("host", parameterToString(localVarOptionals.Host.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Operation.IsSet() {
		localVarQueryParams.Add("operation", parameterToString(localVarOptionals.Operation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// ClustersClusterIdAclsGetOpts Optional parameters for the method 'ClustersClusterIdAclsGet'
type ClustersClusterIdAclsGetOpts struct {
	ResourceType optional.Interface
	ResourceName optional.String
	PatternType  optional.Interface
	Principal    optional.String
	Host         optional.String
	Operation    optional.Interface
	Permission   optional.Interface
}

/*
 * ClustersClusterIdAclsGet Search ACLs
 *
 * Returns a list of ACLs that match the search criteria.
 *
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param clusterId The Kafka cluster ID.
 * @param optional nil or *ClustersClusterIdAclsGetOpts - Optional Parameters:
 * @param "ResourceType" (optional.Interface of AclResourceType) -  The ACL resource type.
 * @param "ResourceName" (optional.String) -  The ACL resource name.
 * @param "PatternType" (optional.Interface of AclPatternType) -  The ACL pattern type.
 * @param "Principal" (optional.String) -  The ACL principal.
 * @param "Host" (optional.String) -  The ACL host.
 * @param "Operation" (optional.Interface of AclOperation) -  The ACL operation.
 * @param "Permission" (optional.Interface of AclPermission) -  The ACL permission.
 * @return AclDataList
 */
func (a *ACLApiService) ClustersClusterIdAclsGet(ctx _context.Context, clusterId string, localVarOptionals *ClustersClusterIdAclsGetOpts) (AclDataList, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AclDataList
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/clusters/{cluster_id}/acls"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", _neturl.PathEscape(parameterToString(clusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.ResourceType.IsSet() {
		localVarQueryParams.Add("resource_type", parameterToString(localVarOptionals.ResourceType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ResourceName.IsSet() {
		localVarQueryParams.Add("resource_name", parameterToString(localVarOptionals.ResourceName.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PatternType.IsSet() {
		localVarQueryParams.Add("pattern_type", parameterToString(localVarOptionals.PatternType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Principal.IsSet() {
		localVarQueryParams.Add("principal", parameterToString(localVarOptionals.Principal.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Host.IsSet() {
		localVarQueryParams.Add("host", parameterToString(localVarOptionals.Host.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Operation.IsSet() {
		localVarQueryParams.Add("operation", parameterToString(localVarOptionals.Operation.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Permission.IsSet() {
		localVarQueryParams.Add("permission", parameterToString(localVarOptionals.Permission.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// ClustersClusterIdAclsPostOpts Optional parameters for the method 'ClustersClusterIdAclsPost'
type ClustersClusterIdAclsPostOpts struct {
	CreateAclRequestData optional.Interface
}

/*
 * ClustersClusterIdAclsPost Create ACLs
 *
 * Creates an ACL.
 *
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param clusterId The Kafka cluster ID.
 * @param optional nil or *ClustersClusterIdAclsPostOpts - Optional Parameters:
 * @param "CreateAclRequestData" (optional.Interface of CreateAclRequestData) -  The ACL creation request.
 */
func (a *ACLApiService) ClustersClusterIdAclsPost(ctx _context.Context, clusterId string, localVarOptionals *ClustersClusterIdAclsPostOpts) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/clusters/{cluster_id}/acls"
	localVarPath = strings.Replace(localVarPath, "{"+"cluster_id"+"}", _neturl.PathEscape(parameterToString(clusterId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.CreateAclRequestData.IsSet() {
		localVarOptionalCreateAclRequestData, localVarOptionalCreateAclRequestDataok := localVarOptionals.CreateAclRequestData.Value().(CreateAclRequestData)
		if !localVarOptionalCreateAclRequestDataok {
			return nil, reportError("createAclRequestData should be CreateAclRequestData")
		}
		localVarPostBody = &localVarOptionalCreateAclRequestData
	}

	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
