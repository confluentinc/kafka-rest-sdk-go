// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: api_broker_v3.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3 "github.com/confluentinc/kafka-rest-sdk-go/kafkarestv3"
)

// BrokerV3Api is a mock of BrokerV3Api interface
type BrokerV3Api struct {
	lockClustersClusterIdBrokersBrokerIdDelete sync.Mutex
	ClustersClusterIdBrokersBrokerIdDeleteFunc func(ctx context.Context, clusterId string, brokerId int32, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdDeleteOpts) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerRemovalData, *net_http.Response, error)

	lockClustersClusterIdBrokersBrokerIdGet sync.Mutex
	ClustersClusterIdBrokersBrokerIdGetFunc func(ctx context.Context, clusterId string, brokerId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerData, *net_http.Response, error)

	lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet sync.Mutex
	ClustersClusterIdBrokersBrokerIdPartitionReplicasGetFunc func(ctx context.Context, clusterId string, brokerId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ReplicaDataList, *net_http.Response, error)

	lockClustersClusterIdBrokersGet sync.Mutex
	ClustersClusterIdBrokersGetFunc func(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerDataList, *net_http.Response, error)

	calls struct {
		ClustersClusterIdBrokersBrokerIdDelete []struct {
			Ctx               context.Context
			ClusterId         string
			BrokerId          int32
			LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdDeleteOpts
		}
		ClustersClusterIdBrokersBrokerIdGet []struct {
			Ctx       context.Context
			ClusterId string
			BrokerId  int32
		}
		ClustersClusterIdBrokersBrokerIdPartitionReplicasGet []struct {
			Ctx       context.Context
			ClusterId string
			BrokerId  int32
		}
		ClustersClusterIdBrokersGet []struct {
			Ctx       context.Context
			ClusterId string
		}
	}
}

// ClustersClusterIdBrokersBrokerIdDelete mocks base method by wrapping the associated func.
func (m *BrokerV3Api) ClustersClusterIdBrokersBrokerIdDelete(ctx context.Context, clusterId string, brokerId int32, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdDeleteOpts) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerRemovalData, *net_http.Response, error) {
	m.lockClustersClusterIdBrokersBrokerIdDelete.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdDelete.Unlock()

	if m.ClustersClusterIdBrokersBrokerIdDeleteFunc == nil {
		panic("mocker: BrokerV3Api.ClustersClusterIdBrokersBrokerIdDeleteFunc is nil but BrokerV3Api.ClustersClusterIdBrokersBrokerIdDelete was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		BrokerId          int32
		LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdDeleteOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		BrokerId:          brokerId,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdBrokersBrokerIdDelete = append(m.calls.ClustersClusterIdBrokersBrokerIdDelete, call)

	return m.ClustersClusterIdBrokersBrokerIdDeleteFunc(ctx, clusterId, brokerId, localVarOptionals)
}

// ClustersClusterIdBrokersBrokerIdDeleteCalled returns true if ClustersClusterIdBrokersBrokerIdDelete was called at least once.
func (m *BrokerV3Api) ClustersClusterIdBrokersBrokerIdDeleteCalled() bool {
	m.lockClustersClusterIdBrokersBrokerIdDelete.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdDelete.Unlock()

	return len(m.calls.ClustersClusterIdBrokersBrokerIdDelete) > 0
}

// ClustersClusterIdBrokersBrokerIdDeleteCalls returns the calls made to ClustersClusterIdBrokersBrokerIdDelete.
func (m *BrokerV3Api) ClustersClusterIdBrokersBrokerIdDeleteCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	BrokerId          int32
	LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdDeleteOpts
} {
	m.lockClustersClusterIdBrokersBrokerIdDelete.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdDelete.Unlock()

	return m.calls.ClustersClusterIdBrokersBrokerIdDelete
}

// ClustersClusterIdBrokersBrokerIdGet mocks base method by wrapping the associated func.
func (m *BrokerV3Api) ClustersClusterIdBrokersBrokerIdGet(ctx context.Context, clusterId string, brokerId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerData, *net_http.Response, error) {
	m.lockClustersClusterIdBrokersBrokerIdGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdGet.Unlock()

	if m.ClustersClusterIdBrokersBrokerIdGetFunc == nil {
		panic("mocker: BrokerV3Api.ClustersClusterIdBrokersBrokerIdGetFunc is nil but BrokerV3Api.ClustersClusterIdBrokersBrokerIdGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		BrokerId  int32
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		BrokerId:  brokerId,
	}

	m.calls.ClustersClusterIdBrokersBrokerIdGet = append(m.calls.ClustersClusterIdBrokersBrokerIdGet, call)

	return m.ClustersClusterIdBrokersBrokerIdGetFunc(ctx, clusterId, brokerId)
}

// ClustersClusterIdBrokersBrokerIdGetCalled returns true if ClustersClusterIdBrokersBrokerIdGet was called at least once.
func (m *BrokerV3Api) ClustersClusterIdBrokersBrokerIdGetCalled() bool {
	m.lockClustersClusterIdBrokersBrokerIdGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdGet.Unlock()

	return len(m.calls.ClustersClusterIdBrokersBrokerIdGet) > 0
}

// ClustersClusterIdBrokersBrokerIdGetCalls returns the calls made to ClustersClusterIdBrokersBrokerIdGet.
func (m *BrokerV3Api) ClustersClusterIdBrokersBrokerIdGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
	BrokerId  int32
} {
	m.lockClustersClusterIdBrokersBrokerIdGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdGet.Unlock()

	return m.calls.ClustersClusterIdBrokersBrokerIdGet
}

// ClustersClusterIdBrokersBrokerIdPartitionReplicasGet mocks base method by wrapping the associated func.
func (m *BrokerV3Api) ClustersClusterIdBrokersBrokerIdPartitionReplicasGet(ctx context.Context, clusterId string, brokerId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ReplicaDataList, *net_http.Response, error) {
	m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Unlock()

	if m.ClustersClusterIdBrokersBrokerIdPartitionReplicasGetFunc == nil {
		panic("mocker: BrokerV3Api.ClustersClusterIdBrokersBrokerIdPartitionReplicasGetFunc is nil but BrokerV3Api.ClustersClusterIdBrokersBrokerIdPartitionReplicasGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		BrokerId  int32
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		BrokerId:  brokerId,
	}

	m.calls.ClustersClusterIdBrokersBrokerIdPartitionReplicasGet = append(m.calls.ClustersClusterIdBrokersBrokerIdPartitionReplicasGet, call)

	return m.ClustersClusterIdBrokersBrokerIdPartitionReplicasGetFunc(ctx, clusterId, brokerId)
}

// ClustersClusterIdBrokersBrokerIdPartitionReplicasGetCalled returns true if ClustersClusterIdBrokersBrokerIdPartitionReplicasGet was called at least once.
func (m *BrokerV3Api) ClustersClusterIdBrokersBrokerIdPartitionReplicasGetCalled() bool {
	m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Unlock()

	return len(m.calls.ClustersClusterIdBrokersBrokerIdPartitionReplicasGet) > 0
}

// ClustersClusterIdBrokersBrokerIdPartitionReplicasGetCalls returns the calls made to ClustersClusterIdBrokersBrokerIdPartitionReplicasGet.
func (m *BrokerV3Api) ClustersClusterIdBrokersBrokerIdPartitionReplicasGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
	BrokerId  int32
} {
	m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Unlock()

	return m.calls.ClustersClusterIdBrokersBrokerIdPartitionReplicasGet
}

// ClustersClusterIdBrokersGet mocks base method by wrapping the associated func.
func (m *BrokerV3Api) ClustersClusterIdBrokersGet(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerDataList, *net_http.Response, error) {
	m.lockClustersClusterIdBrokersGet.Lock()
	defer m.lockClustersClusterIdBrokersGet.Unlock()

	if m.ClustersClusterIdBrokersGetFunc == nil {
		panic("mocker: BrokerV3Api.ClustersClusterIdBrokersGetFunc is nil but BrokerV3Api.ClustersClusterIdBrokersGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.ClustersClusterIdBrokersGet = append(m.calls.ClustersClusterIdBrokersGet, call)

	return m.ClustersClusterIdBrokersGetFunc(ctx, clusterId)
}

// ClustersClusterIdBrokersGetCalled returns true if ClustersClusterIdBrokersGet was called at least once.
func (m *BrokerV3Api) ClustersClusterIdBrokersGetCalled() bool {
	m.lockClustersClusterIdBrokersGet.Lock()
	defer m.lockClustersClusterIdBrokersGet.Unlock()

	return len(m.calls.ClustersClusterIdBrokersGet) > 0
}

// ClustersClusterIdBrokersGetCalls returns the calls made to ClustersClusterIdBrokersGet.
func (m *BrokerV3Api) ClustersClusterIdBrokersGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockClustersClusterIdBrokersGet.Lock()
	defer m.lockClustersClusterIdBrokersGet.Unlock()

	return m.calls.ClustersClusterIdBrokersGet
}

// Reset resets the calls made to the mocked methods.
func (m *BrokerV3Api) Reset() {
	m.lockClustersClusterIdBrokersBrokerIdDelete.Lock()
	m.calls.ClustersClusterIdBrokersBrokerIdDelete = nil
	m.lockClustersClusterIdBrokersBrokerIdDelete.Unlock()
	m.lockClustersClusterIdBrokersBrokerIdGet.Lock()
	m.calls.ClustersClusterIdBrokersBrokerIdGet = nil
	m.lockClustersClusterIdBrokersBrokerIdGet.Unlock()
	m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Lock()
	m.calls.ClustersClusterIdBrokersBrokerIdPartitionReplicasGet = nil
	m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Unlock()
	m.lockClustersClusterIdBrokersGet.Lock()
	m.calls.ClustersClusterIdBrokersGet = nil
	m.lockClustersClusterIdBrokersGet.Unlock()
}
