// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: ../kafka-rest-sdk-go/kafkarestv3/api_cluster_linking.go

package mock

import (
	command_line_arguments "command-line-arguments"
	context "context"
	net_http "net/http"
	sync "sync"
)

// ClusterLinkingApi is a mock of ClusterLinkingApi interface
type ClusterLinkingApi struct {
	lockClustersClusterIdLinksGet sync.Mutex
	ClustersClusterIdLinksGetFunc func(ctx context.Context, clusterId string) (command_line_arguments.ListLinksResponseDataList, *net_http.Response, error)

	lockClustersClusterIdLinksLinkNameConfigsConfigNameDelete sync.Mutex
	ClustersClusterIdLinksLinkNameConfigsConfigNameDeleteFunc func(ctx context.Context, clusterId, linkName, configName string) (*net_http.Response, error)

	lockClustersClusterIdLinksLinkNameConfigsConfigNameGet sync.Mutex
	ClustersClusterIdLinksLinkNameConfigsConfigNameGetFunc func(ctx context.Context, clusterId, linkName, configName string) (command_line_arguments.ListLinkConfigsResponseData, *net_http.Response, error)

	lockClustersClusterIdLinksLinkNameConfigsConfigNamePut sync.Mutex
	ClustersClusterIdLinksLinkNameConfigsConfigNamePutFunc func(ctx context.Context, clusterId, linkName, configName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameConfigsConfigNamePutOpts) (*net_http.Response, error)

	lockClustersClusterIdLinksLinkNameConfigsGet sync.Mutex
	ClustersClusterIdLinksLinkNameConfigsGetFunc func(ctx context.Context, clusterId, linkName string) (command_line_arguments.ListLinkConfigsResponseDataList, *net_http.Response, error)

	lockClustersClusterIdLinksLinkNameConfigsalterPut sync.Mutex
	ClustersClusterIdLinksLinkNameConfigsalterPutFunc func(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameConfigsalterPutOpts) (*net_http.Response, error)

	lockClustersClusterIdLinksLinkNameDelete sync.Mutex
	ClustersClusterIdLinksLinkNameDeleteFunc func(ctx context.Context, clusterId, linkName string) (*net_http.Response, error)

	lockClustersClusterIdLinksLinkNameGet sync.Mutex
	ClustersClusterIdLinksLinkNameGetFunc func(ctx context.Context, clusterId, linkName string) (command_line_arguments.ListLinksResponseData, *net_http.Response, error)

	lockClustersClusterIdLinksLinkNameMirrorsGet sync.Mutex
	ClustersClusterIdLinksLinkNameMirrorsGetFunc func(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsGetOpts) (command_line_arguments.ListMirrorTopicsResponseDataList, *net_http.Response, error)

	lockClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet sync.Mutex
	ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGetFunc func(ctx context.Context, clusterId, linkName, mirrorTopicName string) (command_line_arguments.ListMirrorTopicsResponseData, *net_http.Response, error)

	lockClustersClusterIdLinksLinkNameMirrorsPost sync.Mutex
	ClustersClusterIdLinksLinkNameMirrorsPostFunc func(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsPostOpts) (*net_http.Response, error)

	lockClustersClusterIdLinksLinkNameMirrorsfailoverPost sync.Mutex
	ClustersClusterIdLinksLinkNameMirrorsfailoverPostFunc func(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsfailoverPostOpts) (command_line_arguments.AlterMirrorStatusResponseDataList, *net_http.Response, error)

	lockClustersClusterIdLinksLinkNameMirrorspausePost sync.Mutex
	ClustersClusterIdLinksLinkNameMirrorspausePostFunc func(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorspausePostOpts) (command_line_arguments.AlterMirrorStatusResponseDataList, *net_http.Response, error)

	lockClustersClusterIdLinksLinkNameMirrorspromotePost sync.Mutex
	ClustersClusterIdLinksLinkNameMirrorspromotePostFunc func(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorspromotePostOpts) (command_line_arguments.AlterMirrorStatusResponseDataList, *net_http.Response, error)

	lockClustersClusterIdLinksLinkNameMirrorsresumePost sync.Mutex
	ClustersClusterIdLinksLinkNameMirrorsresumePostFunc func(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsresumePostOpts) (command_line_arguments.AlterMirrorStatusResponseDataList, *net_http.Response, error)

	lockClustersClusterIdLinksMirrorsGet sync.Mutex
	ClustersClusterIdLinksMirrorsGetFunc func(ctx context.Context, clusterId string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksMirrorsGetOpts) (command_line_arguments.ListMirrorTopicsResponseDataList, *net_http.Response, error)

	lockClustersClusterIdLinksPost sync.Mutex
	ClustersClusterIdLinksPostFunc func(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksPostOpts) (*net_http.Response, error)

	calls struct {
		ClustersClusterIdLinksGet []struct {
			Ctx       context.Context
			ClusterId string
		}
		ClustersClusterIdLinksLinkNameConfigsConfigNameDelete []struct {
			Ctx        context.Context
			ClusterId  string
			LinkName   string
			ConfigName string
		}
		ClustersClusterIdLinksLinkNameConfigsConfigNameGet []struct {
			Ctx        context.Context
			ClusterId  string
			LinkName   string
			ConfigName string
		}
		ClustersClusterIdLinksLinkNameConfigsConfigNamePut []struct {
			Ctx               context.Context
			ClusterId         string
			LinkName          string
			ConfigName        string
			LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameConfigsConfigNamePutOpts
		}
		ClustersClusterIdLinksLinkNameConfigsGet []struct {
			Ctx       context.Context
			ClusterId string
			LinkName  string
		}
		ClustersClusterIdLinksLinkNameConfigsalterPut []struct {
			Ctx               context.Context
			ClusterId         string
			LinkName          string
			LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameConfigsalterPutOpts
		}
		ClustersClusterIdLinksLinkNameDelete []struct {
			Ctx       context.Context
			ClusterId string
			LinkName  string
		}
		ClustersClusterIdLinksLinkNameGet []struct {
			Ctx       context.Context
			ClusterId string
			LinkName  string
		}
		ClustersClusterIdLinksLinkNameMirrorsGet []struct {
			Ctx               context.Context
			ClusterId         string
			LinkName          string
			LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsGetOpts
		}
		ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet []struct {
			Ctx             context.Context
			ClusterId       string
			LinkName        string
			MirrorTopicName string
		}
		ClustersClusterIdLinksLinkNameMirrorsPost []struct {
			Ctx               context.Context
			ClusterId         string
			LinkName          string
			LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsPostOpts
		}
		ClustersClusterIdLinksLinkNameMirrorsfailoverPost []struct {
			Ctx               context.Context
			ClusterId         string
			LinkName          string
			LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsfailoverPostOpts
		}
		ClustersClusterIdLinksLinkNameMirrorspausePost []struct {
			Ctx               context.Context
			ClusterId         string
			LinkName          string
			LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorspausePostOpts
		}
		ClustersClusterIdLinksLinkNameMirrorspromotePost []struct {
			Ctx               context.Context
			ClusterId         string
			LinkName          string
			LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorspromotePostOpts
		}
		ClustersClusterIdLinksLinkNameMirrorsresumePost []struct {
			Ctx               context.Context
			ClusterId         string
			LinkName          string
			LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsresumePostOpts
		}
		ClustersClusterIdLinksMirrorsGet []struct {
			Ctx               context.Context
			ClusterId         string
			LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksMirrorsGetOpts
		}
		ClustersClusterIdLinksPost []struct {
			Ctx               context.Context
			ClusterId         string
			LinkName          string
			LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksPostOpts
		}
	}
}

// ClustersClusterIdLinksGet mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksGet(ctx context.Context, clusterId string) (command_line_arguments.ListLinksResponseDataList, *net_http.Response, error) {
	m.lockClustersClusterIdLinksGet.Lock()
	defer m.lockClustersClusterIdLinksGet.Unlock()

	if m.ClustersClusterIdLinksGetFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksGetFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.ClustersClusterIdLinksGet = append(m.calls.ClustersClusterIdLinksGet, call)

	return m.ClustersClusterIdLinksGetFunc(ctx, clusterId)
}

// ClustersClusterIdLinksGetCalled returns true if ClustersClusterIdLinksGet was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksGetCalled() bool {
	m.lockClustersClusterIdLinksGet.Lock()
	defer m.lockClustersClusterIdLinksGet.Unlock()

	return len(m.calls.ClustersClusterIdLinksGet) > 0
}

// ClustersClusterIdLinksGetCalls returns the calls made to ClustersClusterIdLinksGet.
func (m *ClusterLinkingApi) ClustersClusterIdLinksGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockClustersClusterIdLinksGet.Lock()
	defer m.lockClustersClusterIdLinksGet.Unlock()

	return m.calls.ClustersClusterIdLinksGet
}

// ClustersClusterIdLinksLinkNameConfigsConfigNameDelete mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameConfigsConfigNameDelete(ctx context.Context, clusterId, linkName, configName string) (*net_http.Response, error) {
	m.lockClustersClusterIdLinksLinkNameConfigsConfigNameDelete.Lock()
	defer m.lockClustersClusterIdLinksLinkNameConfigsConfigNameDelete.Unlock()

	if m.ClustersClusterIdLinksLinkNameConfigsConfigNameDeleteFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksLinkNameConfigsConfigNameDeleteFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksLinkNameConfigsConfigNameDelete was called.")
	}

	call := struct {
		Ctx        context.Context
		ClusterId  string
		LinkName   string
		ConfigName string
	}{
		Ctx:        ctx,
		ClusterId:  clusterId,
		LinkName:   linkName,
		ConfigName: configName,
	}

	m.calls.ClustersClusterIdLinksLinkNameConfigsConfigNameDelete = append(m.calls.ClustersClusterIdLinksLinkNameConfigsConfigNameDelete, call)

	return m.ClustersClusterIdLinksLinkNameConfigsConfigNameDeleteFunc(ctx, clusterId, linkName, configName)
}

// ClustersClusterIdLinksLinkNameConfigsConfigNameDeleteCalled returns true if ClustersClusterIdLinksLinkNameConfigsConfigNameDelete was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameConfigsConfigNameDeleteCalled() bool {
	m.lockClustersClusterIdLinksLinkNameConfigsConfigNameDelete.Lock()
	defer m.lockClustersClusterIdLinksLinkNameConfigsConfigNameDelete.Unlock()

	return len(m.calls.ClustersClusterIdLinksLinkNameConfigsConfigNameDelete) > 0
}

// ClustersClusterIdLinksLinkNameConfigsConfigNameDeleteCalls returns the calls made to ClustersClusterIdLinksLinkNameConfigsConfigNameDelete.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameConfigsConfigNameDeleteCalls() []struct {
	Ctx        context.Context
	ClusterId  string
	LinkName   string
	ConfigName string
} {
	m.lockClustersClusterIdLinksLinkNameConfigsConfigNameDelete.Lock()
	defer m.lockClustersClusterIdLinksLinkNameConfigsConfigNameDelete.Unlock()

	return m.calls.ClustersClusterIdLinksLinkNameConfigsConfigNameDelete
}

// ClustersClusterIdLinksLinkNameConfigsConfigNameGet mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameConfigsConfigNameGet(ctx context.Context, clusterId, linkName, configName string) (command_line_arguments.ListLinkConfigsResponseData, *net_http.Response, error) {
	m.lockClustersClusterIdLinksLinkNameConfigsConfigNameGet.Lock()
	defer m.lockClustersClusterIdLinksLinkNameConfigsConfigNameGet.Unlock()

	if m.ClustersClusterIdLinksLinkNameConfigsConfigNameGetFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksLinkNameConfigsConfigNameGetFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksLinkNameConfigsConfigNameGet was called.")
	}

	call := struct {
		Ctx        context.Context
		ClusterId  string
		LinkName   string
		ConfigName string
	}{
		Ctx:        ctx,
		ClusterId:  clusterId,
		LinkName:   linkName,
		ConfigName: configName,
	}

	m.calls.ClustersClusterIdLinksLinkNameConfigsConfigNameGet = append(m.calls.ClustersClusterIdLinksLinkNameConfigsConfigNameGet, call)

	return m.ClustersClusterIdLinksLinkNameConfigsConfigNameGetFunc(ctx, clusterId, linkName, configName)
}

// ClustersClusterIdLinksLinkNameConfigsConfigNameGetCalled returns true if ClustersClusterIdLinksLinkNameConfigsConfigNameGet was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameConfigsConfigNameGetCalled() bool {
	m.lockClustersClusterIdLinksLinkNameConfigsConfigNameGet.Lock()
	defer m.lockClustersClusterIdLinksLinkNameConfigsConfigNameGet.Unlock()

	return len(m.calls.ClustersClusterIdLinksLinkNameConfigsConfigNameGet) > 0
}

// ClustersClusterIdLinksLinkNameConfigsConfigNameGetCalls returns the calls made to ClustersClusterIdLinksLinkNameConfigsConfigNameGet.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameConfigsConfigNameGetCalls() []struct {
	Ctx        context.Context
	ClusterId  string
	LinkName   string
	ConfigName string
} {
	m.lockClustersClusterIdLinksLinkNameConfigsConfigNameGet.Lock()
	defer m.lockClustersClusterIdLinksLinkNameConfigsConfigNameGet.Unlock()

	return m.calls.ClustersClusterIdLinksLinkNameConfigsConfigNameGet
}

// ClustersClusterIdLinksLinkNameConfigsConfigNamePut mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameConfigsConfigNamePut(ctx context.Context, clusterId, linkName, configName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameConfigsConfigNamePutOpts) (*net_http.Response, error) {
	m.lockClustersClusterIdLinksLinkNameConfigsConfigNamePut.Lock()
	defer m.lockClustersClusterIdLinksLinkNameConfigsConfigNamePut.Unlock()

	if m.ClustersClusterIdLinksLinkNameConfigsConfigNamePutFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksLinkNameConfigsConfigNamePutFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksLinkNameConfigsConfigNamePut was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		LinkName          string
		ConfigName        string
		LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameConfigsConfigNamePutOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		LinkName:          linkName,
		ConfigName:        configName,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdLinksLinkNameConfigsConfigNamePut = append(m.calls.ClustersClusterIdLinksLinkNameConfigsConfigNamePut, call)

	return m.ClustersClusterIdLinksLinkNameConfigsConfigNamePutFunc(ctx, clusterId, linkName, configName, localVarOptionals)
}

// ClustersClusterIdLinksLinkNameConfigsConfigNamePutCalled returns true if ClustersClusterIdLinksLinkNameConfigsConfigNamePut was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameConfigsConfigNamePutCalled() bool {
	m.lockClustersClusterIdLinksLinkNameConfigsConfigNamePut.Lock()
	defer m.lockClustersClusterIdLinksLinkNameConfigsConfigNamePut.Unlock()

	return len(m.calls.ClustersClusterIdLinksLinkNameConfigsConfigNamePut) > 0
}

// ClustersClusterIdLinksLinkNameConfigsConfigNamePutCalls returns the calls made to ClustersClusterIdLinksLinkNameConfigsConfigNamePut.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameConfigsConfigNamePutCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	LinkName          string
	ConfigName        string
	LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameConfigsConfigNamePutOpts
} {
	m.lockClustersClusterIdLinksLinkNameConfigsConfigNamePut.Lock()
	defer m.lockClustersClusterIdLinksLinkNameConfigsConfigNamePut.Unlock()

	return m.calls.ClustersClusterIdLinksLinkNameConfigsConfigNamePut
}

// ClustersClusterIdLinksLinkNameConfigsGet mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameConfigsGet(ctx context.Context, clusterId, linkName string) (command_line_arguments.ListLinkConfigsResponseDataList, *net_http.Response, error) {
	m.lockClustersClusterIdLinksLinkNameConfigsGet.Lock()
	defer m.lockClustersClusterIdLinksLinkNameConfigsGet.Unlock()

	if m.ClustersClusterIdLinksLinkNameConfigsGetFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksLinkNameConfigsGetFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksLinkNameConfigsGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		LinkName  string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		LinkName:  linkName,
	}

	m.calls.ClustersClusterIdLinksLinkNameConfigsGet = append(m.calls.ClustersClusterIdLinksLinkNameConfigsGet, call)

	return m.ClustersClusterIdLinksLinkNameConfigsGetFunc(ctx, clusterId, linkName)
}

// ClustersClusterIdLinksLinkNameConfigsGetCalled returns true if ClustersClusterIdLinksLinkNameConfigsGet was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameConfigsGetCalled() bool {
	m.lockClustersClusterIdLinksLinkNameConfigsGet.Lock()
	defer m.lockClustersClusterIdLinksLinkNameConfigsGet.Unlock()

	return len(m.calls.ClustersClusterIdLinksLinkNameConfigsGet) > 0
}

// ClustersClusterIdLinksLinkNameConfigsGetCalls returns the calls made to ClustersClusterIdLinksLinkNameConfigsGet.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameConfigsGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
	LinkName  string
} {
	m.lockClustersClusterIdLinksLinkNameConfigsGet.Lock()
	defer m.lockClustersClusterIdLinksLinkNameConfigsGet.Unlock()

	return m.calls.ClustersClusterIdLinksLinkNameConfigsGet
}

// ClustersClusterIdLinksLinkNameConfigsalterPut mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameConfigsalterPut(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameConfigsalterPutOpts) (*net_http.Response, error) {
	m.lockClustersClusterIdLinksLinkNameConfigsalterPut.Lock()
	defer m.lockClustersClusterIdLinksLinkNameConfigsalterPut.Unlock()

	if m.ClustersClusterIdLinksLinkNameConfigsalterPutFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksLinkNameConfigsalterPutFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksLinkNameConfigsalterPut was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		LinkName          string
		LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameConfigsalterPutOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		LinkName:          linkName,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdLinksLinkNameConfigsalterPut = append(m.calls.ClustersClusterIdLinksLinkNameConfigsalterPut, call)

	return m.ClustersClusterIdLinksLinkNameConfigsalterPutFunc(ctx, clusterId, linkName, localVarOptionals)
}

// ClustersClusterIdLinksLinkNameConfigsalterPutCalled returns true if ClustersClusterIdLinksLinkNameConfigsalterPut was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameConfigsalterPutCalled() bool {
	m.lockClustersClusterIdLinksLinkNameConfigsalterPut.Lock()
	defer m.lockClustersClusterIdLinksLinkNameConfigsalterPut.Unlock()

	return len(m.calls.ClustersClusterIdLinksLinkNameConfigsalterPut) > 0
}

// ClustersClusterIdLinksLinkNameConfigsalterPutCalls returns the calls made to ClustersClusterIdLinksLinkNameConfigsalterPut.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameConfigsalterPutCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	LinkName          string
	LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameConfigsalterPutOpts
} {
	m.lockClustersClusterIdLinksLinkNameConfigsalterPut.Lock()
	defer m.lockClustersClusterIdLinksLinkNameConfigsalterPut.Unlock()

	return m.calls.ClustersClusterIdLinksLinkNameConfigsalterPut
}

// ClustersClusterIdLinksLinkNameDelete mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameDelete(ctx context.Context, clusterId, linkName string) (*net_http.Response, error) {
	m.lockClustersClusterIdLinksLinkNameDelete.Lock()
	defer m.lockClustersClusterIdLinksLinkNameDelete.Unlock()

	if m.ClustersClusterIdLinksLinkNameDeleteFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksLinkNameDeleteFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksLinkNameDelete was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		LinkName  string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		LinkName:  linkName,
	}

	m.calls.ClustersClusterIdLinksLinkNameDelete = append(m.calls.ClustersClusterIdLinksLinkNameDelete, call)

	return m.ClustersClusterIdLinksLinkNameDeleteFunc(ctx, clusterId, linkName)
}

// ClustersClusterIdLinksLinkNameDeleteCalled returns true if ClustersClusterIdLinksLinkNameDelete was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameDeleteCalled() bool {
	m.lockClustersClusterIdLinksLinkNameDelete.Lock()
	defer m.lockClustersClusterIdLinksLinkNameDelete.Unlock()

	return len(m.calls.ClustersClusterIdLinksLinkNameDelete) > 0
}

// ClustersClusterIdLinksLinkNameDeleteCalls returns the calls made to ClustersClusterIdLinksLinkNameDelete.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameDeleteCalls() []struct {
	Ctx       context.Context
	ClusterId string
	LinkName  string
} {
	m.lockClustersClusterIdLinksLinkNameDelete.Lock()
	defer m.lockClustersClusterIdLinksLinkNameDelete.Unlock()

	return m.calls.ClustersClusterIdLinksLinkNameDelete
}

// ClustersClusterIdLinksLinkNameGet mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameGet(ctx context.Context, clusterId, linkName string) (command_line_arguments.ListLinksResponseData, *net_http.Response, error) {
	m.lockClustersClusterIdLinksLinkNameGet.Lock()
	defer m.lockClustersClusterIdLinksLinkNameGet.Unlock()

	if m.ClustersClusterIdLinksLinkNameGetFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksLinkNameGetFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksLinkNameGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		LinkName  string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		LinkName:  linkName,
	}

	m.calls.ClustersClusterIdLinksLinkNameGet = append(m.calls.ClustersClusterIdLinksLinkNameGet, call)

	return m.ClustersClusterIdLinksLinkNameGetFunc(ctx, clusterId, linkName)
}

// ClustersClusterIdLinksLinkNameGetCalled returns true if ClustersClusterIdLinksLinkNameGet was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameGetCalled() bool {
	m.lockClustersClusterIdLinksLinkNameGet.Lock()
	defer m.lockClustersClusterIdLinksLinkNameGet.Unlock()

	return len(m.calls.ClustersClusterIdLinksLinkNameGet) > 0
}

// ClustersClusterIdLinksLinkNameGetCalls returns the calls made to ClustersClusterIdLinksLinkNameGet.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
	LinkName  string
} {
	m.lockClustersClusterIdLinksLinkNameGet.Lock()
	defer m.lockClustersClusterIdLinksLinkNameGet.Unlock()

	return m.calls.ClustersClusterIdLinksLinkNameGet
}

// ClustersClusterIdLinksLinkNameMirrorsGet mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorsGet(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsGetOpts) (command_line_arguments.ListMirrorTopicsResponseDataList, *net_http.Response, error) {
	m.lockClustersClusterIdLinksLinkNameMirrorsGet.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorsGet.Unlock()

	if m.ClustersClusterIdLinksLinkNameMirrorsGetFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksLinkNameMirrorsGetFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksLinkNameMirrorsGet was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		LinkName          string
		LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsGetOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		LinkName:          linkName,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdLinksLinkNameMirrorsGet = append(m.calls.ClustersClusterIdLinksLinkNameMirrorsGet, call)

	return m.ClustersClusterIdLinksLinkNameMirrorsGetFunc(ctx, clusterId, linkName, localVarOptionals)
}

// ClustersClusterIdLinksLinkNameMirrorsGetCalled returns true if ClustersClusterIdLinksLinkNameMirrorsGet was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorsGetCalled() bool {
	m.lockClustersClusterIdLinksLinkNameMirrorsGet.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorsGet.Unlock()

	return len(m.calls.ClustersClusterIdLinksLinkNameMirrorsGet) > 0
}

// ClustersClusterIdLinksLinkNameMirrorsGetCalls returns the calls made to ClustersClusterIdLinksLinkNameMirrorsGet.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorsGetCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	LinkName          string
	LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsGetOpts
} {
	m.lockClustersClusterIdLinksLinkNameMirrorsGet.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorsGet.Unlock()

	return m.calls.ClustersClusterIdLinksLinkNameMirrorsGet
}

// ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet(ctx context.Context, clusterId, linkName, mirrorTopicName string) (command_line_arguments.ListMirrorTopicsResponseData, *net_http.Response, error) {
	m.lockClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet.Unlock()

	if m.ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGetFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGetFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet was called.")
	}

	call := struct {
		Ctx             context.Context
		ClusterId       string
		LinkName        string
		MirrorTopicName string
	}{
		Ctx:             ctx,
		ClusterId:       clusterId,
		LinkName:        linkName,
		MirrorTopicName: mirrorTopicName,
	}

	m.calls.ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet = append(m.calls.ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet, call)

	return m.ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGetFunc(ctx, clusterId, linkName, mirrorTopicName)
}

// ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGetCalled returns true if ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGetCalled() bool {
	m.lockClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet.Unlock()

	return len(m.calls.ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet) > 0
}

// ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGetCalls returns the calls made to ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGetCalls() []struct {
	Ctx             context.Context
	ClusterId       string
	LinkName        string
	MirrorTopicName string
} {
	m.lockClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet.Unlock()

	return m.calls.ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet
}

// ClustersClusterIdLinksLinkNameMirrorsPost mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorsPost(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsPostOpts) (*net_http.Response, error) {
	m.lockClustersClusterIdLinksLinkNameMirrorsPost.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorsPost.Unlock()

	if m.ClustersClusterIdLinksLinkNameMirrorsPostFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksLinkNameMirrorsPostFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksLinkNameMirrorsPost was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		LinkName          string
		LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsPostOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		LinkName:          linkName,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdLinksLinkNameMirrorsPost = append(m.calls.ClustersClusterIdLinksLinkNameMirrorsPost, call)

	return m.ClustersClusterIdLinksLinkNameMirrorsPostFunc(ctx, clusterId, linkName, localVarOptionals)
}

// ClustersClusterIdLinksLinkNameMirrorsPostCalled returns true if ClustersClusterIdLinksLinkNameMirrorsPost was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorsPostCalled() bool {
	m.lockClustersClusterIdLinksLinkNameMirrorsPost.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorsPost.Unlock()

	return len(m.calls.ClustersClusterIdLinksLinkNameMirrorsPost) > 0
}

// ClustersClusterIdLinksLinkNameMirrorsPostCalls returns the calls made to ClustersClusterIdLinksLinkNameMirrorsPost.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorsPostCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	LinkName          string
	LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsPostOpts
} {
	m.lockClustersClusterIdLinksLinkNameMirrorsPost.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorsPost.Unlock()

	return m.calls.ClustersClusterIdLinksLinkNameMirrorsPost
}

// ClustersClusterIdLinksLinkNameMirrorsfailoverPost mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorsfailoverPost(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsfailoverPostOpts) (command_line_arguments.AlterMirrorStatusResponseDataList, *net_http.Response, error) {
	m.lockClustersClusterIdLinksLinkNameMirrorsfailoverPost.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorsfailoverPost.Unlock()

	if m.ClustersClusterIdLinksLinkNameMirrorsfailoverPostFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksLinkNameMirrorsfailoverPostFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksLinkNameMirrorsfailoverPost was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		LinkName          string
		LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsfailoverPostOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		LinkName:          linkName,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdLinksLinkNameMirrorsfailoverPost = append(m.calls.ClustersClusterIdLinksLinkNameMirrorsfailoverPost, call)

	return m.ClustersClusterIdLinksLinkNameMirrorsfailoverPostFunc(ctx, clusterId, linkName, localVarOptionals)
}

// ClustersClusterIdLinksLinkNameMirrorsfailoverPostCalled returns true if ClustersClusterIdLinksLinkNameMirrorsfailoverPost was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorsfailoverPostCalled() bool {
	m.lockClustersClusterIdLinksLinkNameMirrorsfailoverPost.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorsfailoverPost.Unlock()

	return len(m.calls.ClustersClusterIdLinksLinkNameMirrorsfailoverPost) > 0
}

// ClustersClusterIdLinksLinkNameMirrorsfailoverPostCalls returns the calls made to ClustersClusterIdLinksLinkNameMirrorsfailoverPost.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorsfailoverPostCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	LinkName          string
	LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsfailoverPostOpts
} {
	m.lockClustersClusterIdLinksLinkNameMirrorsfailoverPost.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorsfailoverPost.Unlock()

	return m.calls.ClustersClusterIdLinksLinkNameMirrorsfailoverPost
}

// ClustersClusterIdLinksLinkNameMirrorspausePost mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorspausePost(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorspausePostOpts) (command_line_arguments.AlterMirrorStatusResponseDataList, *net_http.Response, error) {
	m.lockClustersClusterIdLinksLinkNameMirrorspausePost.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorspausePost.Unlock()

	if m.ClustersClusterIdLinksLinkNameMirrorspausePostFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksLinkNameMirrorspausePostFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksLinkNameMirrorspausePost was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		LinkName          string
		LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorspausePostOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		LinkName:          linkName,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdLinksLinkNameMirrorspausePost = append(m.calls.ClustersClusterIdLinksLinkNameMirrorspausePost, call)

	return m.ClustersClusterIdLinksLinkNameMirrorspausePostFunc(ctx, clusterId, linkName, localVarOptionals)
}

// ClustersClusterIdLinksLinkNameMirrorspausePostCalled returns true if ClustersClusterIdLinksLinkNameMirrorspausePost was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorspausePostCalled() bool {
	m.lockClustersClusterIdLinksLinkNameMirrorspausePost.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorspausePost.Unlock()

	return len(m.calls.ClustersClusterIdLinksLinkNameMirrorspausePost) > 0
}

// ClustersClusterIdLinksLinkNameMirrorspausePostCalls returns the calls made to ClustersClusterIdLinksLinkNameMirrorspausePost.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorspausePostCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	LinkName          string
	LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorspausePostOpts
} {
	m.lockClustersClusterIdLinksLinkNameMirrorspausePost.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorspausePost.Unlock()

	return m.calls.ClustersClusterIdLinksLinkNameMirrorspausePost
}

// ClustersClusterIdLinksLinkNameMirrorspromotePost mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorspromotePost(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorspromotePostOpts) (command_line_arguments.AlterMirrorStatusResponseDataList, *net_http.Response, error) {
	m.lockClustersClusterIdLinksLinkNameMirrorspromotePost.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorspromotePost.Unlock()

	if m.ClustersClusterIdLinksLinkNameMirrorspromotePostFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksLinkNameMirrorspromotePostFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksLinkNameMirrorspromotePost was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		LinkName          string
		LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorspromotePostOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		LinkName:          linkName,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdLinksLinkNameMirrorspromotePost = append(m.calls.ClustersClusterIdLinksLinkNameMirrorspromotePost, call)

	return m.ClustersClusterIdLinksLinkNameMirrorspromotePostFunc(ctx, clusterId, linkName, localVarOptionals)
}

// ClustersClusterIdLinksLinkNameMirrorspromotePostCalled returns true if ClustersClusterIdLinksLinkNameMirrorspromotePost was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorspromotePostCalled() bool {
	m.lockClustersClusterIdLinksLinkNameMirrorspromotePost.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorspromotePost.Unlock()

	return len(m.calls.ClustersClusterIdLinksLinkNameMirrorspromotePost) > 0
}

// ClustersClusterIdLinksLinkNameMirrorspromotePostCalls returns the calls made to ClustersClusterIdLinksLinkNameMirrorspromotePost.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorspromotePostCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	LinkName          string
	LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorspromotePostOpts
} {
	m.lockClustersClusterIdLinksLinkNameMirrorspromotePost.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorspromotePost.Unlock()

	return m.calls.ClustersClusterIdLinksLinkNameMirrorspromotePost
}

// ClustersClusterIdLinksLinkNameMirrorsresumePost mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorsresumePost(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsresumePostOpts) (command_line_arguments.AlterMirrorStatusResponseDataList, *net_http.Response, error) {
	m.lockClustersClusterIdLinksLinkNameMirrorsresumePost.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorsresumePost.Unlock()

	if m.ClustersClusterIdLinksLinkNameMirrorsresumePostFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksLinkNameMirrorsresumePostFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksLinkNameMirrorsresumePost was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		LinkName          string
		LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsresumePostOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		LinkName:          linkName,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdLinksLinkNameMirrorsresumePost = append(m.calls.ClustersClusterIdLinksLinkNameMirrorsresumePost, call)

	return m.ClustersClusterIdLinksLinkNameMirrorsresumePostFunc(ctx, clusterId, linkName, localVarOptionals)
}

// ClustersClusterIdLinksLinkNameMirrorsresumePostCalled returns true if ClustersClusterIdLinksLinkNameMirrorsresumePost was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorsresumePostCalled() bool {
	m.lockClustersClusterIdLinksLinkNameMirrorsresumePost.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorsresumePost.Unlock()

	return len(m.calls.ClustersClusterIdLinksLinkNameMirrorsresumePost) > 0
}

// ClustersClusterIdLinksLinkNameMirrorsresumePostCalls returns the calls made to ClustersClusterIdLinksLinkNameMirrorsresumePost.
func (m *ClusterLinkingApi) ClustersClusterIdLinksLinkNameMirrorsresumePostCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	LinkName          string
	LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksLinkNameMirrorsresumePostOpts
} {
	m.lockClustersClusterIdLinksLinkNameMirrorsresumePost.Lock()
	defer m.lockClustersClusterIdLinksLinkNameMirrorsresumePost.Unlock()

	return m.calls.ClustersClusterIdLinksLinkNameMirrorsresumePost
}

// ClustersClusterIdLinksMirrorsGet mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksMirrorsGet(ctx context.Context, clusterId string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksMirrorsGetOpts) (command_line_arguments.ListMirrorTopicsResponseDataList, *net_http.Response, error) {
	m.lockClustersClusterIdLinksMirrorsGet.Lock()
	defer m.lockClustersClusterIdLinksMirrorsGet.Unlock()

	if m.ClustersClusterIdLinksMirrorsGetFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksMirrorsGetFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksMirrorsGet was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksMirrorsGetOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdLinksMirrorsGet = append(m.calls.ClustersClusterIdLinksMirrorsGet, call)

	return m.ClustersClusterIdLinksMirrorsGetFunc(ctx, clusterId, localVarOptionals)
}

// ClustersClusterIdLinksMirrorsGetCalled returns true if ClustersClusterIdLinksMirrorsGet was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksMirrorsGetCalled() bool {
	m.lockClustersClusterIdLinksMirrorsGet.Lock()
	defer m.lockClustersClusterIdLinksMirrorsGet.Unlock()

	return len(m.calls.ClustersClusterIdLinksMirrorsGet) > 0
}

// ClustersClusterIdLinksMirrorsGetCalls returns the calls made to ClustersClusterIdLinksMirrorsGet.
func (m *ClusterLinkingApi) ClustersClusterIdLinksMirrorsGetCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksMirrorsGetOpts
} {
	m.lockClustersClusterIdLinksMirrorsGet.Lock()
	defer m.lockClustersClusterIdLinksMirrorsGet.Unlock()

	return m.calls.ClustersClusterIdLinksMirrorsGet
}

// ClustersClusterIdLinksPost mocks base method by wrapping the associated func.
func (m *ClusterLinkingApi) ClustersClusterIdLinksPost(ctx context.Context, clusterId, linkName string, localVarOptionals *command_line_arguments.ClustersClusterIdLinksPostOpts) (*net_http.Response, error) {
	m.lockClustersClusterIdLinksPost.Lock()
	defer m.lockClustersClusterIdLinksPost.Unlock()

	if m.ClustersClusterIdLinksPostFunc == nil {
		panic("mocker: ClusterLinkingApi.ClustersClusterIdLinksPostFunc is nil but ClusterLinkingApi.ClustersClusterIdLinksPost was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		LinkName          string
		LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksPostOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		LinkName:          linkName,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdLinksPost = append(m.calls.ClustersClusterIdLinksPost, call)

	return m.ClustersClusterIdLinksPostFunc(ctx, clusterId, linkName, localVarOptionals)
}

// ClustersClusterIdLinksPostCalled returns true if ClustersClusterIdLinksPost was called at least once.
func (m *ClusterLinkingApi) ClustersClusterIdLinksPostCalled() bool {
	m.lockClustersClusterIdLinksPost.Lock()
	defer m.lockClustersClusterIdLinksPost.Unlock()

	return len(m.calls.ClustersClusterIdLinksPost) > 0
}

// ClustersClusterIdLinksPostCalls returns the calls made to ClustersClusterIdLinksPost.
func (m *ClusterLinkingApi) ClustersClusterIdLinksPostCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	LinkName          string
	LocalVarOptionals *command_line_arguments.ClustersClusterIdLinksPostOpts
} {
	m.lockClustersClusterIdLinksPost.Lock()
	defer m.lockClustersClusterIdLinksPost.Unlock()

	return m.calls.ClustersClusterIdLinksPost
}

// Reset resets the calls made to the mocked methods.
func (m *ClusterLinkingApi) Reset() {
	m.lockClustersClusterIdLinksGet.Lock()
	m.calls.ClustersClusterIdLinksGet = nil
	m.lockClustersClusterIdLinksGet.Unlock()
	m.lockClustersClusterIdLinksLinkNameConfigsConfigNameDelete.Lock()
	m.calls.ClustersClusterIdLinksLinkNameConfigsConfigNameDelete = nil
	m.lockClustersClusterIdLinksLinkNameConfigsConfigNameDelete.Unlock()
	m.lockClustersClusterIdLinksLinkNameConfigsConfigNameGet.Lock()
	m.calls.ClustersClusterIdLinksLinkNameConfigsConfigNameGet = nil
	m.lockClustersClusterIdLinksLinkNameConfigsConfigNameGet.Unlock()
	m.lockClustersClusterIdLinksLinkNameConfigsConfigNamePut.Lock()
	m.calls.ClustersClusterIdLinksLinkNameConfigsConfigNamePut = nil
	m.lockClustersClusterIdLinksLinkNameConfigsConfigNamePut.Unlock()
	m.lockClustersClusterIdLinksLinkNameConfigsGet.Lock()
	m.calls.ClustersClusterIdLinksLinkNameConfigsGet = nil
	m.lockClustersClusterIdLinksLinkNameConfigsGet.Unlock()
	m.lockClustersClusterIdLinksLinkNameConfigsalterPut.Lock()
	m.calls.ClustersClusterIdLinksLinkNameConfigsalterPut = nil
	m.lockClustersClusterIdLinksLinkNameConfigsalterPut.Unlock()
	m.lockClustersClusterIdLinksLinkNameDelete.Lock()
	m.calls.ClustersClusterIdLinksLinkNameDelete = nil
	m.lockClustersClusterIdLinksLinkNameDelete.Unlock()
	m.lockClustersClusterIdLinksLinkNameGet.Lock()
	m.calls.ClustersClusterIdLinksLinkNameGet = nil
	m.lockClustersClusterIdLinksLinkNameGet.Unlock()
	m.lockClustersClusterIdLinksLinkNameMirrorsGet.Lock()
	m.calls.ClustersClusterIdLinksLinkNameMirrorsGet = nil
	m.lockClustersClusterIdLinksLinkNameMirrorsGet.Unlock()
	m.lockClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet.Lock()
	m.calls.ClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet = nil
	m.lockClustersClusterIdLinksLinkNameMirrorsMirrorTopicNameGet.Unlock()
	m.lockClustersClusterIdLinksLinkNameMirrorsPost.Lock()
	m.calls.ClustersClusterIdLinksLinkNameMirrorsPost = nil
	m.lockClustersClusterIdLinksLinkNameMirrorsPost.Unlock()
	m.lockClustersClusterIdLinksLinkNameMirrorsfailoverPost.Lock()
	m.calls.ClustersClusterIdLinksLinkNameMirrorsfailoverPost = nil
	m.lockClustersClusterIdLinksLinkNameMirrorsfailoverPost.Unlock()
	m.lockClustersClusterIdLinksLinkNameMirrorspausePost.Lock()
	m.calls.ClustersClusterIdLinksLinkNameMirrorspausePost = nil
	m.lockClustersClusterIdLinksLinkNameMirrorspausePost.Unlock()
	m.lockClustersClusterIdLinksLinkNameMirrorspromotePost.Lock()
	m.calls.ClustersClusterIdLinksLinkNameMirrorspromotePost = nil
	m.lockClustersClusterIdLinksLinkNameMirrorspromotePost.Unlock()
	m.lockClustersClusterIdLinksLinkNameMirrorsresumePost.Lock()
	m.calls.ClustersClusterIdLinksLinkNameMirrorsresumePost = nil
	m.lockClustersClusterIdLinksLinkNameMirrorsresumePost.Unlock()
	m.lockClustersClusterIdLinksMirrorsGet.Lock()
	m.calls.ClustersClusterIdLinksMirrorsGet = nil
	m.lockClustersClusterIdLinksMirrorsGet.Unlock()
	m.lockClustersClusterIdLinksPost.Lock()
	m.calls.ClustersClusterIdLinksPost = nil
	m.lockClustersClusterIdLinksPost.Unlock()
}
