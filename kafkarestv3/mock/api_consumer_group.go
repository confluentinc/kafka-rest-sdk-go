// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: ../kafka-rest-sdk-go/kafkarestv3/api_consumer_group.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3 "github.com/confluentinc/kafka-rest-sdk-go/kafkarestv3"
)

// ConsumerGroupApi is a mock of ConsumerGroupApi interface
type ConsumerGroupApi struct {
	lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet sync.Mutex
	ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGetFunc func(ctx context.Context, clusterId, consumerGroupId, consumerId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerAssignmentDataList, *net_http.Response, error)

	lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet sync.Mutex
	ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGetFunc func(ctx context.Context, clusterId, consumerGroupId, consumerId, topicName string, partitionId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerAssignmentData, *net_http.Response, error)

	lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet sync.Mutex
	ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGetFunc func(ctx context.Context, clusterId, consumerGroupId, consumerId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerData, *net_http.Response, error)

	lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet sync.Mutex
	ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGetFunc func(ctx context.Context, clusterId, consumerGroupId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerDataList, *net_http.Response, error)

	lockClustersClusterIdConsumerGroupsConsumerGroupIdGet sync.Mutex
	ClustersClusterIdConsumerGroupsConsumerGroupIdGetFunc func(ctx context.Context, clusterId, consumerGroupId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerGroupData, *net_http.Response, error)

	lockClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet sync.Mutex
	ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGetFunc func(ctx context.Context, clusterId, consumerGroupId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerGroupLagSummaryData, *net_http.Response, error)

	lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet sync.Mutex
	ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGetFunc func(ctx context.Context, clusterId, consumerGroupId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerLagDataList, *net_http.Response, error)

	lockClustersClusterIdConsumerGroupsGet sync.Mutex
	ClustersClusterIdConsumerGroupsGetFunc func(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerGroupDataList, *net_http.Response, error)

	calls struct {
		ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet []struct {
			Ctx             context.Context
			ClusterId       string
			ConsumerGroupId string
			ConsumerId      string
		}
		ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet []struct {
			Ctx             context.Context
			ClusterId       string
			ConsumerGroupId string
			ConsumerId      string
			TopicName       string
			PartitionId     int32
		}
		ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet []struct {
			Ctx             context.Context
			ClusterId       string
			ConsumerGroupId string
			ConsumerId      string
		}
		ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet []struct {
			Ctx             context.Context
			ClusterId       string
			ConsumerGroupId string
		}
		ClustersClusterIdConsumerGroupsConsumerGroupIdGet []struct {
			Ctx             context.Context
			ClusterId       string
			ConsumerGroupId string
		}
		ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet []struct {
			Ctx             context.Context
			ClusterId       string
			ConsumerGroupId string
		}
		ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet []struct {
			Ctx             context.Context
			ClusterId       string
			ConsumerGroupId string
		}
		ClustersClusterIdConsumerGroupsGet []struct {
			Ctx       context.Context
			ClusterId string
		}
	}
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet mocks base method by wrapping the associated func.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet(ctx context.Context, clusterId, consumerGroupId, consumerId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerAssignmentDataList, *net_http.Response, error) {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet.Unlock()

	if m.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGetFunc == nil {
		panic("mocker: ConsumerGroupApi.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGetFunc is nil but ConsumerGroupApi.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet was called.")
	}

	call := struct {
		Ctx             context.Context
		ClusterId       string
		ConsumerGroupId string
		ConsumerId      string
	}{
		Ctx:             ctx,
		ClusterId:       clusterId,
		ConsumerGroupId: consumerGroupId,
		ConsumerId:      consumerId,
	}

	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet = append(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet, call)

	return m.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGetFunc(ctx, clusterId, consumerGroupId, consumerId)
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGetCalled returns true if ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet was called at least once.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGetCalled() bool {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet.Unlock()

	return len(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet) > 0
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGetCalls returns the calls made to ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGetCalls() []struct {
	Ctx             context.Context
	ClusterId       string
	ConsumerGroupId string
	ConsumerId      string
} {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet.Unlock()

	return m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet mocks base method by wrapping the associated func.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet(ctx context.Context, clusterId, consumerGroupId, consumerId, topicName string, partitionId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerAssignmentData, *net_http.Response, error) {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet.Unlock()

	if m.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGetFunc == nil {
		panic("mocker: ConsumerGroupApi.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGetFunc is nil but ConsumerGroupApi.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet was called.")
	}

	call := struct {
		Ctx             context.Context
		ClusterId       string
		ConsumerGroupId string
		ConsumerId      string
		TopicName       string
		PartitionId     int32
	}{
		Ctx:             ctx,
		ClusterId:       clusterId,
		ConsumerGroupId: consumerGroupId,
		ConsumerId:      consumerId,
		TopicName:       topicName,
		PartitionId:     partitionId,
	}

	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet = append(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet, call)

	return m.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGetFunc(ctx, clusterId, consumerGroupId, consumerId, topicName, partitionId)
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGetCalled returns true if ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet was called at least once.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGetCalled() bool {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet.Unlock()

	return len(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet) > 0
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGetCalls returns the calls made to ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGetCalls() []struct {
	Ctx             context.Context
	ClusterId       string
	ConsumerGroupId string
	ConsumerId      string
	TopicName       string
	PartitionId     int32
} {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet.Unlock()

	return m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet mocks base method by wrapping the associated func.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet(ctx context.Context, clusterId, consumerGroupId, consumerId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerData, *net_http.Response, error) {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet.Unlock()

	if m.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGetFunc == nil {
		panic("mocker: ConsumerGroupApi.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGetFunc is nil but ConsumerGroupApi.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet was called.")
	}

	call := struct {
		Ctx             context.Context
		ClusterId       string
		ConsumerGroupId string
		ConsumerId      string
	}{
		Ctx:             ctx,
		ClusterId:       clusterId,
		ConsumerGroupId: consumerGroupId,
		ConsumerId:      consumerId,
	}

	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet = append(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet, call)

	return m.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGetFunc(ctx, clusterId, consumerGroupId, consumerId)
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGetCalled returns true if ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet was called at least once.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGetCalled() bool {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet.Unlock()

	return len(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet) > 0
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGetCalls returns the calls made to ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGetCalls() []struct {
	Ctx             context.Context
	ClusterId       string
	ConsumerGroupId string
	ConsumerId      string
} {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet.Unlock()

	return m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet mocks base method by wrapping the associated func.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet(ctx context.Context, clusterId, consumerGroupId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerDataList, *net_http.Response, error) {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet.Unlock()

	if m.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGetFunc == nil {
		panic("mocker: ConsumerGroupApi.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGetFunc is nil but ConsumerGroupApi.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet was called.")
	}

	call := struct {
		Ctx             context.Context
		ClusterId       string
		ConsumerGroupId string
	}{
		Ctx:             ctx,
		ClusterId:       clusterId,
		ConsumerGroupId: consumerGroupId,
	}

	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet = append(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet, call)

	return m.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGetFunc(ctx, clusterId, consumerGroupId)
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGetCalled returns true if ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet was called at least once.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGetCalled() bool {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet.Unlock()

	return len(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet) > 0
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGetCalls returns the calls made to ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGetCalls() []struct {
	Ctx             context.Context
	ClusterId       string
	ConsumerGroupId string
} {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet.Unlock()

	return m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdGet mocks base method by wrapping the associated func.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdGet(ctx context.Context, clusterId, consumerGroupId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerGroupData, *net_http.Response, error) {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdGet.Unlock()

	if m.ClustersClusterIdConsumerGroupsConsumerGroupIdGetFunc == nil {
		panic("mocker: ConsumerGroupApi.ClustersClusterIdConsumerGroupsConsumerGroupIdGetFunc is nil but ConsumerGroupApi.ClustersClusterIdConsumerGroupsConsumerGroupIdGet was called.")
	}

	call := struct {
		Ctx             context.Context
		ClusterId       string
		ConsumerGroupId string
	}{
		Ctx:             ctx,
		ClusterId:       clusterId,
		ConsumerGroupId: consumerGroupId,
	}

	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdGet = append(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdGet, call)

	return m.ClustersClusterIdConsumerGroupsConsumerGroupIdGetFunc(ctx, clusterId, consumerGroupId)
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdGetCalled returns true if ClustersClusterIdConsumerGroupsConsumerGroupIdGet was called at least once.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdGetCalled() bool {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdGet.Unlock()

	return len(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdGet) > 0
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdGetCalls returns the calls made to ClustersClusterIdConsumerGroupsConsumerGroupIdGet.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdGetCalls() []struct {
	Ctx             context.Context
	ClusterId       string
	ConsumerGroupId string
} {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdGet.Unlock()

	return m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdGet
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet mocks base method by wrapping the associated func.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet(ctx context.Context, clusterId, consumerGroupId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerGroupLagSummaryData, *net_http.Response, error) {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet.Unlock()

	if m.ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGetFunc == nil {
		panic("mocker: ConsumerGroupApi.ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGetFunc is nil but ConsumerGroupApi.ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet was called.")
	}

	call := struct {
		Ctx             context.Context
		ClusterId       string
		ConsumerGroupId string
	}{
		Ctx:             ctx,
		ClusterId:       clusterId,
		ConsumerGroupId: consumerGroupId,
	}

	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet = append(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet, call)

	return m.ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGetFunc(ctx, clusterId, consumerGroupId)
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGetCalled returns true if ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet was called at least once.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGetCalled() bool {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet.Unlock()

	return len(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet) > 0
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGetCalls returns the calls made to ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGetCalls() []struct {
	Ctx             context.Context
	ClusterId       string
	ConsumerGroupId string
} {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet.Unlock()

	return m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet mocks base method by wrapping the associated func.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet(ctx context.Context, clusterId, consumerGroupId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerLagDataList, *net_http.Response, error) {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet.Unlock()

	if m.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGetFunc == nil {
		panic("mocker: ConsumerGroupApi.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGetFunc is nil but ConsumerGroupApi.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet was called.")
	}

	call := struct {
		Ctx             context.Context
		ClusterId       string
		ConsumerGroupId string
	}{
		Ctx:             ctx,
		ClusterId:       clusterId,
		ConsumerGroupId: consumerGroupId,
	}

	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet = append(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet, call)

	return m.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGetFunc(ctx, clusterId, consumerGroupId)
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGetCalled returns true if ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet was called at least once.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGetCalled() bool {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet.Unlock()

	return len(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet) > 0
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGetCalls returns the calls made to ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGetCalls() []struct {
	Ctx             context.Context
	ClusterId       string
	ConsumerGroupId string
} {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet.Unlock()

	return m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet
}

// ClustersClusterIdConsumerGroupsGet mocks base method by wrapping the associated func.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsGet(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerGroupDataList, *net_http.Response, error) {
	m.lockClustersClusterIdConsumerGroupsGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsGet.Unlock()

	if m.ClustersClusterIdConsumerGroupsGetFunc == nil {
		panic("mocker: ConsumerGroupApi.ClustersClusterIdConsumerGroupsGetFunc is nil but ConsumerGroupApi.ClustersClusterIdConsumerGroupsGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.ClustersClusterIdConsumerGroupsGet = append(m.calls.ClustersClusterIdConsumerGroupsGet, call)

	return m.ClustersClusterIdConsumerGroupsGetFunc(ctx, clusterId)
}

// ClustersClusterIdConsumerGroupsGetCalled returns true if ClustersClusterIdConsumerGroupsGet was called at least once.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsGetCalled() bool {
	m.lockClustersClusterIdConsumerGroupsGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsGet.Unlock()

	return len(m.calls.ClustersClusterIdConsumerGroupsGet) > 0
}

// ClustersClusterIdConsumerGroupsGetCalls returns the calls made to ClustersClusterIdConsumerGroupsGet.
func (m *ConsumerGroupApi) ClustersClusterIdConsumerGroupsGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockClustersClusterIdConsumerGroupsGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsGet.Unlock()

	return m.calls.ClustersClusterIdConsumerGroupsGet
}

// Reset resets the calls made to the mocked methods.
func (m *ConsumerGroupApi) Reset() {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet.Lock()
	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet = nil
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsGet.Unlock()
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet.Lock()
	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet = nil
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdAssignmentsTopicNamePartitionsPartitionIdGet.Unlock()
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet.Lock()
	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet = nil
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersConsumerIdGet.Unlock()
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet.Lock()
	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet = nil
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdConsumersGet.Unlock()
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdGet.Lock()
	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdGet = nil
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdGet.Unlock()
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet.Lock()
	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet = nil
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagSummaryGet.Unlock()
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet.Lock()
	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet = nil
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsGet.Unlock()
	m.lockClustersClusterIdConsumerGroupsGet.Lock()
	m.calls.ClustersClusterIdConsumerGroupsGet = nil
	m.lockClustersClusterIdConsumerGroupsGet.Unlock()
}
