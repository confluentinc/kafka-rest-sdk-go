// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: ../kafka-rest-sdk-go/kafkarestv3/api_partition.go

package mock

import (
	command_line_arguments "command-line-arguments"
	context "context"
	net_http "net/http"
	sync "sync"
)

// PartitionApi is a mock of PartitionApi interface
type PartitionApi struct {
	lockClustersClusterIdTopicsPartitionsReassignmentGet sync.Mutex
	ClustersClusterIdTopicsPartitionsReassignmentGetFunc func(ctx context.Context, clusterId string) (command_line_arguments.ReassignmentDataList, *net_http.Response, error)

	lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet sync.Mutex
	ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetFunc func(ctx context.Context, clusterId, topicName string, partitionId int32) (command_line_arguments.ReassignmentData, *net_http.Response, error)

	lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet sync.Mutex
	ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetFunc func(ctx context.Context, clusterId, topicName string) (command_line_arguments.ReassignmentDataList, *net_http.Response, error)

	calls struct {
		ClustersClusterIdTopicsPartitionsReassignmentGet []struct {
			Ctx       context.Context
			ClusterId string
		}
		ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet []struct {
			Ctx         context.Context
			ClusterId   string
			TopicName   string
			PartitionId int32
		}
		ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
		}
	}
}

// ClustersClusterIdTopicsPartitionsReassignmentGet mocks base method by wrapping the associated func.
func (m *PartitionApi) ClustersClusterIdTopicsPartitionsReassignmentGet(ctx context.Context, clusterId string) (command_line_arguments.ReassignmentDataList, *net_http.Response, error) {
	m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Unlock()

	if m.ClustersClusterIdTopicsPartitionsReassignmentGetFunc == nil {
		panic("mocker: PartitionApi.ClustersClusterIdTopicsPartitionsReassignmentGetFunc is nil but PartitionApi.ClustersClusterIdTopicsPartitionsReassignmentGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.ClustersClusterIdTopicsPartitionsReassignmentGet = append(m.calls.ClustersClusterIdTopicsPartitionsReassignmentGet, call)

	return m.ClustersClusterIdTopicsPartitionsReassignmentGetFunc(ctx, clusterId)
}

// ClustersClusterIdTopicsPartitionsReassignmentGetCalled returns true if ClustersClusterIdTopicsPartitionsReassignmentGet was called at least once.
func (m *PartitionApi) ClustersClusterIdTopicsPartitionsReassignmentGetCalled() bool {
	m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Unlock()

	return len(m.calls.ClustersClusterIdTopicsPartitionsReassignmentGet) > 0
}

// ClustersClusterIdTopicsPartitionsReassignmentGetCalls returns the calls made to ClustersClusterIdTopicsPartitionsReassignmentGet.
func (m *PartitionApi) ClustersClusterIdTopicsPartitionsReassignmentGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Unlock()

	return m.calls.ClustersClusterIdTopicsPartitionsReassignmentGet
}

// ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet mocks base method by wrapping the associated func.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet(ctx context.Context, clusterId, topicName string, partitionId int32) (command_line_arguments.ReassignmentData, *net_http.Response, error) {
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Unlock()

	if m.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetFunc == nil {
		panic("mocker: PartitionApi.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetFunc is nil but PartitionApi.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet was called.")
	}

	call := struct {
		Ctx         context.Context
		ClusterId   string
		TopicName   string
		PartitionId int32
	}{
		Ctx:         ctx,
		ClusterId:   clusterId,
		TopicName:   topicName,
		PartitionId: partitionId,
	}

	m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet = append(m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet, call)

	return m.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetFunc(ctx, clusterId, topicName, partitionId)
}

// ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetCalled returns true if ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet was called at least once.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetCalled() bool {
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Unlock()

	return len(m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet) > 0
}

// ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetCalls returns the calls made to ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetCalls() []struct {
	Ctx         context.Context
	ClusterId   string
	TopicName   string
	PartitionId int32
} {
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Unlock()

	return m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet
}

// ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet mocks base method by wrapping the associated func.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet(ctx context.Context, clusterId, topicName string) (command_line_arguments.ReassignmentDataList, *net_http.Response, error) {
	m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Unlock()

	if m.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetFunc == nil {
		panic("mocker: PartitionApi.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetFunc is nil but PartitionApi.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
	}

	m.calls.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet = append(m.calls.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet, call)

	return m.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetFunc(ctx, clusterId, topicName)
}

// ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetCalled returns true if ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet was called at least once.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetCalled() bool {
	m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Unlock()

	return len(m.calls.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet) > 0
}

// ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetCalls returns the calls made to ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
} {
	m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Unlock()

	return m.calls.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet
}

// Reset resets the calls made to the mocked methods.
func (m *PartitionApi) Reset() {
	m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Lock()
	m.calls.ClustersClusterIdTopicsPartitionsReassignmentGet = nil
	m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Unlock()
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Lock()
	m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet = nil
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Unlock()
	m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Lock()
	m.calls.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet = nil
	m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Unlock()
}
