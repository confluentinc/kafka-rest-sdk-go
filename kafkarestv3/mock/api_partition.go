// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: ../kafka-rest-sdk-go/kafkarestv3/api_partition.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3 "github.com/confluentinc/kafka-rest-sdk-go/kafkarestv3"
)

// PartitionApi is a mock of PartitionApi interface
type PartitionApi struct {
	lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet sync.Mutex
	ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGetFunc func(ctx context.Context, clusterId, consumerGroupId, topicName string, partitionId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerLagData, *net_http.Response, error)

	lockClustersClusterIdTopicsPartitionsReassignmentGet sync.Mutex
	ClustersClusterIdTopicsPartitionsReassignmentGetFunc func(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ReassignmentDataList, *net_http.Response, error)

	lockClustersClusterIdTopicsTopicNamePartitionsGet sync.Mutex
	ClustersClusterIdTopicsTopicNamePartitionsGetFunc func(ctx context.Context, clusterId, topicName string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.PartitionDataList, *net_http.Response, error)

	lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet sync.Mutex
	ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGetFunc func(ctx context.Context, clusterId, topicName string, partitionId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.PartitionData, *net_http.Response, error)

	lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet sync.Mutex
	ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetFunc func(ctx context.Context, clusterId, topicName string, partitionId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ReassignmentData, *net_http.Response, error)

	lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet sync.Mutex
	ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetFunc func(ctx context.Context, clusterId, topicName string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ReassignmentDataList, *net_http.Response, error)

	calls struct {
		ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet []struct {
			Ctx             context.Context
			ClusterId       string
			ConsumerGroupId string
			TopicName       string
			PartitionId     int32
		}
		ClustersClusterIdTopicsPartitionsReassignmentGet []struct {
			Ctx       context.Context
			ClusterId string
		}
		ClustersClusterIdTopicsTopicNamePartitionsGet []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
		}
		ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet []struct {
			Ctx         context.Context
			ClusterId   string
			TopicName   string
			PartitionId int32
		}
		ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet []struct {
			Ctx         context.Context
			ClusterId   string
			TopicName   string
			PartitionId int32
		}
		ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
		}
	}
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet mocks base method by wrapping the associated func.
func (m *PartitionApi) ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet(ctx context.Context, clusterId, consumerGroupId, topicName string, partitionId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ConsumerLagData, *net_http.Response, error) {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet.Unlock()

	if m.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGetFunc == nil {
		panic("mocker: PartitionApi.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGetFunc is nil but PartitionApi.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet was called.")
	}

	call := struct {
		Ctx             context.Context
		ClusterId       string
		ConsumerGroupId string
		TopicName       string
		PartitionId     int32
	}{
		Ctx:             ctx,
		ClusterId:       clusterId,
		ConsumerGroupId: consumerGroupId,
		TopicName:       topicName,
		PartitionId:     partitionId,
	}

	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet = append(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet, call)

	return m.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGetFunc(ctx, clusterId, consumerGroupId, topicName, partitionId)
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGetCalled returns true if ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet was called at least once.
func (m *PartitionApi) ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGetCalled() bool {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet.Unlock()

	return len(m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet) > 0
}

// ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGetCalls returns the calls made to ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet.
func (m *PartitionApi) ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGetCalls() []struct {
	Ctx             context.Context
	ClusterId       string
	ConsumerGroupId string
	TopicName       string
	PartitionId     int32
} {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet.Lock()
	defer m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet.Unlock()

	return m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet
}

// ClustersClusterIdTopicsPartitionsReassignmentGet mocks base method by wrapping the associated func.
func (m *PartitionApi) ClustersClusterIdTopicsPartitionsReassignmentGet(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ReassignmentDataList, *net_http.Response, error) {
	m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Unlock()

	if m.ClustersClusterIdTopicsPartitionsReassignmentGetFunc == nil {
		panic("mocker: PartitionApi.ClustersClusterIdTopicsPartitionsReassignmentGetFunc is nil but PartitionApi.ClustersClusterIdTopicsPartitionsReassignmentGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.ClustersClusterIdTopicsPartitionsReassignmentGet = append(m.calls.ClustersClusterIdTopicsPartitionsReassignmentGet, call)

	return m.ClustersClusterIdTopicsPartitionsReassignmentGetFunc(ctx, clusterId)
}

// ClustersClusterIdTopicsPartitionsReassignmentGetCalled returns true if ClustersClusterIdTopicsPartitionsReassignmentGet was called at least once.
func (m *PartitionApi) ClustersClusterIdTopicsPartitionsReassignmentGetCalled() bool {
	m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Unlock()

	return len(m.calls.ClustersClusterIdTopicsPartitionsReassignmentGet) > 0
}

// ClustersClusterIdTopicsPartitionsReassignmentGetCalls returns the calls made to ClustersClusterIdTopicsPartitionsReassignmentGet.
func (m *PartitionApi) ClustersClusterIdTopicsPartitionsReassignmentGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Unlock()

	return m.calls.ClustersClusterIdTopicsPartitionsReassignmentGet
}

// ClustersClusterIdTopicsTopicNamePartitionsGet mocks base method by wrapping the associated func.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsGet(ctx context.Context, clusterId, topicName string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.PartitionDataList, *net_http.Response, error) {
	m.lockClustersClusterIdTopicsTopicNamePartitionsGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsGet.Unlock()

	if m.ClustersClusterIdTopicsTopicNamePartitionsGetFunc == nil {
		panic("mocker: PartitionApi.ClustersClusterIdTopicsTopicNamePartitionsGetFunc is nil but PartitionApi.ClustersClusterIdTopicsTopicNamePartitionsGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
	}

	m.calls.ClustersClusterIdTopicsTopicNamePartitionsGet = append(m.calls.ClustersClusterIdTopicsTopicNamePartitionsGet, call)

	return m.ClustersClusterIdTopicsTopicNamePartitionsGetFunc(ctx, clusterId, topicName)
}

// ClustersClusterIdTopicsTopicNamePartitionsGetCalled returns true if ClustersClusterIdTopicsTopicNamePartitionsGet was called at least once.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsGetCalled() bool {
	m.lockClustersClusterIdTopicsTopicNamePartitionsGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsGet.Unlock()

	return len(m.calls.ClustersClusterIdTopicsTopicNamePartitionsGet) > 0
}

// ClustersClusterIdTopicsTopicNamePartitionsGetCalls returns the calls made to ClustersClusterIdTopicsTopicNamePartitionsGet.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
} {
	m.lockClustersClusterIdTopicsTopicNamePartitionsGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsGet.Unlock()

	return m.calls.ClustersClusterIdTopicsTopicNamePartitionsGet
}

// ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet mocks base method by wrapping the associated func.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet(ctx context.Context, clusterId, topicName string, partitionId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.PartitionData, *net_http.Response, error) {
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet.Unlock()

	if m.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGetFunc == nil {
		panic("mocker: PartitionApi.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGetFunc is nil but PartitionApi.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet was called.")
	}

	call := struct {
		Ctx         context.Context
		ClusterId   string
		TopicName   string
		PartitionId int32
	}{
		Ctx:         ctx,
		ClusterId:   clusterId,
		TopicName:   topicName,
		PartitionId: partitionId,
	}

	m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet = append(m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet, call)

	return m.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGetFunc(ctx, clusterId, topicName, partitionId)
}

// ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGetCalled returns true if ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet was called at least once.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGetCalled() bool {
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet.Unlock()

	return len(m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet) > 0
}

// ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGetCalls returns the calls made to ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGetCalls() []struct {
	Ctx         context.Context
	ClusterId   string
	TopicName   string
	PartitionId int32
} {
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet.Unlock()

	return m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet
}

// ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet mocks base method by wrapping the associated func.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet(ctx context.Context, clusterId, topicName string, partitionId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ReassignmentData, *net_http.Response, error) {
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Unlock()

	if m.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetFunc == nil {
		panic("mocker: PartitionApi.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetFunc is nil but PartitionApi.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet was called.")
	}

	call := struct {
		Ctx         context.Context
		ClusterId   string
		TopicName   string
		PartitionId int32
	}{
		Ctx:         ctx,
		ClusterId:   clusterId,
		TopicName:   topicName,
		PartitionId: partitionId,
	}

	m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet = append(m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet, call)

	return m.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetFunc(ctx, clusterId, topicName, partitionId)
}

// ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetCalled returns true if ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet was called at least once.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetCalled() bool {
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Unlock()

	return len(m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet) > 0
}

// ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetCalls returns the calls made to ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGetCalls() []struct {
	Ctx         context.Context
	ClusterId   string
	TopicName   string
	PartitionId int32
} {
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Unlock()

	return m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet
}

// ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet mocks base method by wrapping the associated func.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet(ctx context.Context, clusterId, topicName string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ReassignmentDataList, *net_http.Response, error) {
	m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Unlock()

	if m.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetFunc == nil {
		panic("mocker: PartitionApi.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetFunc is nil but PartitionApi.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
	}

	m.calls.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet = append(m.calls.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet, call)

	return m.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetFunc(ctx, clusterId, topicName)
}

// ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetCalled returns true if ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet was called at least once.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetCalled() bool {
	m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Unlock()

	return len(m.calls.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet) > 0
}

// ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetCalls returns the calls made to ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.
func (m *PartitionApi) ClustersClusterIdTopicsTopicNamePartitionsReassignmentGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
} {
	m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Unlock()

	return m.calls.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet
}

// Reset resets the calls made to the mocked methods.
func (m *PartitionApi) Reset() {
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet.Lock()
	m.calls.ClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet = nil
	m.lockClustersClusterIdConsumerGroupsConsumerGroupIdLagsTopicNamePartitionsPartitionIdGet.Unlock()
	m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Lock()
	m.calls.ClustersClusterIdTopicsPartitionsReassignmentGet = nil
	m.lockClustersClusterIdTopicsPartitionsReassignmentGet.Unlock()
	m.lockClustersClusterIdTopicsTopicNamePartitionsGet.Lock()
	m.calls.ClustersClusterIdTopicsTopicNamePartitionsGet = nil
	m.lockClustersClusterIdTopicsTopicNamePartitionsGet.Unlock()
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet.Lock()
	m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet = nil
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdGet.Unlock()
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Lock()
	m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet = nil
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReassignmentGet.Unlock()
	m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Lock()
	m.calls.ClustersClusterIdTopicsTopicNamePartitionsReassignmentGet = nil
	m.lockClustersClusterIdTopicsTopicNamePartitionsReassignmentGet.Unlock()
}
