// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: ../kafka-rest-sdk-go/kafkarestv3/api_configs_v3.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3 "github.com/confluentinc/kafka-rest-sdk-go/kafkarestv3"
)

// ConfigsV3Api is a mock of ConfigsV3Api interface
type ConfigsV3Api struct {
	lockClustersClusterIdBrokersBrokerIdConfigsGet sync.Mutex
	ClustersClusterIdBrokersBrokerIdConfigsGetFunc func(ctx context.Context, clusterId string, brokerId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerConfigDataList, *net_http.Response, error)

	lockClustersClusterIdBrokersBrokerIdConfigsNameDelete sync.Mutex
	ClustersClusterIdBrokersBrokerIdConfigsNameDeleteFunc func(ctx context.Context, clusterId string, brokerId int32, name string) (*net_http.Response, error)

	lockClustersClusterIdBrokersBrokerIdConfigsNameGet sync.Mutex
	ClustersClusterIdBrokersBrokerIdConfigsNameGetFunc func(ctx context.Context, clusterId string, brokerId int32, name string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerConfigData, *net_http.Response, error)

	lockClustersClusterIdBrokersBrokerIdConfigsNamePut sync.Mutex
	ClustersClusterIdBrokersBrokerIdConfigsNamePutFunc func(ctx context.Context, clusterId string, brokerId int32, name string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsNamePutOpts) (*net_http.Response, error)

	lockClustersClusterIdBrokersBrokerIdConfigsalterPost sync.Mutex
	ClustersClusterIdBrokersBrokerIdConfigsalterPostFunc func(ctx context.Context, clusterId string, brokerId int32, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsalterPostOpts) (*net_http.Response, error)

	lockClustersClusterIdBrokersConfigsGet sync.Mutex
	ClustersClusterIdBrokersConfigsGetFunc func(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerConfigDataList, *net_http.Response, error)

	lockDeleteKafkaClusterConfig sync.Mutex
	DeleteKafkaClusterConfigFunc func(ctx context.Context, clusterId, name string) (*net_http.Response, error)

	lockDeleteKafkaTopicConfig sync.Mutex
	DeleteKafkaTopicConfigFunc func(ctx context.Context, clusterId, topicName, name string) (*net_http.Response, error)

	lockGetKafkaClusterConfig sync.Mutex
	GetKafkaClusterConfigFunc func(ctx context.Context, clusterId, name string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClusterConfigData, *net_http.Response, error)

	lockGetKafkaTopicConfig sync.Mutex
	GetKafkaTopicConfigFunc func(ctx context.Context, clusterId, topicName, name string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.TopicConfigData, *net_http.Response, error)

	lockListKafkaAllTopicConfigs sync.Mutex
	ListKafkaAllTopicConfigsFunc func(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.TopicConfigDataList, *net_http.Response, error)

	lockListKafkaClusterConfigs sync.Mutex
	ListKafkaClusterConfigsFunc func(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClusterConfigDataList, *net_http.Response, error)

	lockListKafkaDefaultTopicConfigs sync.Mutex
	ListKafkaDefaultTopicConfigsFunc func(ctx context.Context, clusterId, topicName string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.TopicConfigDataList, *net_http.Response, error)

	lockListKafkaTopicConfigs sync.Mutex
	ListKafkaTopicConfigsFunc func(ctx context.Context, clusterId, topicName string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.TopicConfigDataList, *net_http.Response, error)

	lockUpdateKafkaClusterConfig sync.Mutex
	UpdateKafkaClusterConfigFunc func(ctx context.Context, clusterId, name string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaClusterConfigOpts) (*net_http.Response, error)

	lockUpdateKafkaClusterConfigs sync.Mutex
	UpdateKafkaClusterConfigsFunc func(ctx context.Context, clusterId string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaClusterConfigsOpts) (*net_http.Response, error)

	lockUpdateKafkaTopicConfig sync.Mutex
	UpdateKafkaTopicConfigFunc func(ctx context.Context, clusterId, topicName, name string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaTopicConfigOpts) (*net_http.Response, error)

	lockUpdateKafkaTopicConfigBatch sync.Mutex
	UpdateKafkaTopicConfigBatchFunc func(ctx context.Context, clusterId, topicName string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaTopicConfigBatchOpts) (*net_http.Response, error)

	calls struct {
		ClustersClusterIdBrokersBrokerIdConfigsGet []struct {
			Ctx       context.Context
			ClusterId string
			BrokerId  int32
		}
		ClustersClusterIdBrokersBrokerIdConfigsNameDelete []struct {
			Ctx       context.Context
			ClusterId string
			BrokerId  int32
			Name      string
		}
		ClustersClusterIdBrokersBrokerIdConfigsNameGet []struct {
			Ctx       context.Context
			ClusterId string
			BrokerId  int32
			Name      string
		}
		ClustersClusterIdBrokersBrokerIdConfigsNamePut []struct {
			Ctx               context.Context
			ClusterId         string
			BrokerId          int32
			Name              string
			LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsNamePutOpts
		}
		ClustersClusterIdBrokersBrokerIdConfigsalterPost []struct {
			Ctx               context.Context
			ClusterId         string
			BrokerId          int32
			LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsalterPostOpts
		}
		ClustersClusterIdBrokersConfigsGet []struct {
			Ctx       context.Context
			ClusterId string
		}
		DeleteKafkaClusterConfig []struct {
			Ctx       context.Context
			ClusterId string
			Name      string
		}
		DeleteKafkaTopicConfig []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
			Name      string
		}
		GetKafkaClusterConfig []struct {
			Ctx       context.Context
			ClusterId string
			Name      string
		}
		GetKafkaTopicConfig []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
			Name      string
		}
		ListKafkaAllTopicConfigs []struct {
			Ctx       context.Context
			ClusterId string
		}
		ListKafkaClusterConfigs []struct {
			Ctx       context.Context
			ClusterId string
		}
		ListKafkaDefaultTopicConfigs []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
		}
		ListKafkaTopicConfigs []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
		}
		UpdateKafkaClusterConfig []struct {
			Ctx               context.Context
			ClusterId         string
			Name              string
			LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaClusterConfigOpts
		}
		UpdateKafkaClusterConfigs []struct {
			Ctx               context.Context
			ClusterId         string
			LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaClusterConfigsOpts
		}
		UpdateKafkaTopicConfig []struct {
			Ctx               context.Context
			ClusterId         string
			TopicName         string
			Name              string
			LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaTopicConfigOpts
		}
		UpdateKafkaTopicConfigBatch []struct {
			Ctx               context.Context
			ClusterId         string
			TopicName         string
			LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaTopicConfigBatchOpts
		}
	}
}

// ClustersClusterIdBrokersBrokerIdConfigsGet mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ClustersClusterIdBrokersBrokerIdConfigsGet(ctx context.Context, clusterId string, brokerId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerConfigDataList, *net_http.Response, error) {
	m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Unlock()

	if m.ClustersClusterIdBrokersBrokerIdConfigsGetFunc == nil {
		panic("mocker: ConfigsV3Api.ClustersClusterIdBrokersBrokerIdConfigsGetFunc is nil but ConfigsV3Api.ClustersClusterIdBrokersBrokerIdConfigsGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		BrokerId  int32
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		BrokerId:  brokerId,
	}

	m.calls.ClustersClusterIdBrokersBrokerIdConfigsGet = append(m.calls.ClustersClusterIdBrokersBrokerIdConfigsGet, call)

	return m.ClustersClusterIdBrokersBrokerIdConfigsGetFunc(ctx, clusterId, brokerId)
}

// ClustersClusterIdBrokersBrokerIdConfigsGetCalled returns true if ClustersClusterIdBrokersBrokerIdConfigsGet was called at least once.
func (m *ConfigsV3Api) ClustersClusterIdBrokersBrokerIdConfigsGetCalled() bool {
	m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Unlock()

	return len(m.calls.ClustersClusterIdBrokersBrokerIdConfigsGet) > 0
}

// ClustersClusterIdBrokersBrokerIdConfigsGetCalls returns the calls made to ClustersClusterIdBrokersBrokerIdConfigsGet.
func (m *ConfigsV3Api) ClustersClusterIdBrokersBrokerIdConfigsGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
	BrokerId  int32
} {
	m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Unlock()

	return m.calls.ClustersClusterIdBrokersBrokerIdConfigsGet
}

// ClustersClusterIdBrokersBrokerIdConfigsNameDelete mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ClustersClusterIdBrokersBrokerIdConfigsNameDelete(ctx context.Context, clusterId string, brokerId int32, name string) (*net_http.Response, error) {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Unlock()

	if m.ClustersClusterIdBrokersBrokerIdConfigsNameDeleteFunc == nil {
		panic("mocker: ConfigsV3Api.ClustersClusterIdBrokersBrokerIdConfigsNameDeleteFunc is nil but ConfigsV3Api.ClustersClusterIdBrokersBrokerIdConfigsNameDelete was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		BrokerId  int32
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		BrokerId:  brokerId,
		Name:      name,
	}

	m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameDelete = append(m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameDelete, call)

	return m.ClustersClusterIdBrokersBrokerIdConfigsNameDeleteFunc(ctx, clusterId, brokerId, name)
}

// ClustersClusterIdBrokersBrokerIdConfigsNameDeleteCalled returns true if ClustersClusterIdBrokersBrokerIdConfigsNameDelete was called at least once.
func (m *ConfigsV3Api) ClustersClusterIdBrokersBrokerIdConfigsNameDeleteCalled() bool {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Unlock()

	return len(m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameDelete) > 0
}

// ClustersClusterIdBrokersBrokerIdConfigsNameDeleteCalls returns the calls made to ClustersClusterIdBrokersBrokerIdConfigsNameDelete.
func (m *ConfigsV3Api) ClustersClusterIdBrokersBrokerIdConfigsNameDeleteCalls() []struct {
	Ctx       context.Context
	ClusterId string
	BrokerId  int32
	Name      string
} {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Unlock()

	return m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameDelete
}

// ClustersClusterIdBrokersBrokerIdConfigsNameGet mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ClustersClusterIdBrokersBrokerIdConfigsNameGet(ctx context.Context, clusterId string, brokerId int32, name string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerConfigData, *net_http.Response, error) {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Unlock()

	if m.ClustersClusterIdBrokersBrokerIdConfigsNameGetFunc == nil {
		panic("mocker: ConfigsV3Api.ClustersClusterIdBrokersBrokerIdConfigsNameGetFunc is nil but ConfigsV3Api.ClustersClusterIdBrokersBrokerIdConfigsNameGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		BrokerId  int32
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		BrokerId:  brokerId,
		Name:      name,
	}

	m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameGet = append(m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameGet, call)

	return m.ClustersClusterIdBrokersBrokerIdConfigsNameGetFunc(ctx, clusterId, brokerId, name)
}

// ClustersClusterIdBrokersBrokerIdConfigsNameGetCalled returns true if ClustersClusterIdBrokersBrokerIdConfigsNameGet was called at least once.
func (m *ConfigsV3Api) ClustersClusterIdBrokersBrokerIdConfigsNameGetCalled() bool {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Unlock()

	return len(m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameGet) > 0
}

// ClustersClusterIdBrokersBrokerIdConfigsNameGetCalls returns the calls made to ClustersClusterIdBrokersBrokerIdConfigsNameGet.
func (m *ConfigsV3Api) ClustersClusterIdBrokersBrokerIdConfigsNameGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
	BrokerId  int32
	Name      string
} {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Unlock()

	return m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameGet
}

// ClustersClusterIdBrokersBrokerIdConfigsNamePut mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ClustersClusterIdBrokersBrokerIdConfigsNamePut(ctx context.Context, clusterId string, brokerId int32, name string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsNamePutOpts) (*net_http.Response, error) {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Unlock()

	if m.ClustersClusterIdBrokersBrokerIdConfigsNamePutFunc == nil {
		panic("mocker: ConfigsV3Api.ClustersClusterIdBrokersBrokerIdConfigsNamePutFunc is nil but ConfigsV3Api.ClustersClusterIdBrokersBrokerIdConfigsNamePut was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		BrokerId          int32
		Name              string
		LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsNamePutOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		BrokerId:          brokerId,
		Name:              name,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdBrokersBrokerIdConfigsNamePut = append(m.calls.ClustersClusterIdBrokersBrokerIdConfigsNamePut, call)

	return m.ClustersClusterIdBrokersBrokerIdConfigsNamePutFunc(ctx, clusterId, brokerId, name, localVarOptionals)
}

// ClustersClusterIdBrokersBrokerIdConfigsNamePutCalled returns true if ClustersClusterIdBrokersBrokerIdConfigsNamePut was called at least once.
func (m *ConfigsV3Api) ClustersClusterIdBrokersBrokerIdConfigsNamePutCalled() bool {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Unlock()

	return len(m.calls.ClustersClusterIdBrokersBrokerIdConfigsNamePut) > 0
}

// ClustersClusterIdBrokersBrokerIdConfigsNamePutCalls returns the calls made to ClustersClusterIdBrokersBrokerIdConfigsNamePut.
func (m *ConfigsV3Api) ClustersClusterIdBrokersBrokerIdConfigsNamePutCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	BrokerId          int32
	Name              string
	LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsNamePutOpts
} {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Unlock()

	return m.calls.ClustersClusterIdBrokersBrokerIdConfigsNamePut
}

// ClustersClusterIdBrokersBrokerIdConfigsalterPost mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ClustersClusterIdBrokersBrokerIdConfigsalterPost(ctx context.Context, clusterId string, brokerId int32, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsalterPostOpts) (*net_http.Response, error) {
	m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Unlock()

	if m.ClustersClusterIdBrokersBrokerIdConfigsalterPostFunc == nil {
		panic("mocker: ConfigsV3Api.ClustersClusterIdBrokersBrokerIdConfigsalterPostFunc is nil but ConfigsV3Api.ClustersClusterIdBrokersBrokerIdConfigsalterPost was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		BrokerId          int32
		LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsalterPostOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		BrokerId:          brokerId,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdBrokersBrokerIdConfigsalterPost = append(m.calls.ClustersClusterIdBrokersBrokerIdConfigsalterPost, call)

	return m.ClustersClusterIdBrokersBrokerIdConfigsalterPostFunc(ctx, clusterId, brokerId, localVarOptionals)
}

// ClustersClusterIdBrokersBrokerIdConfigsalterPostCalled returns true if ClustersClusterIdBrokersBrokerIdConfigsalterPost was called at least once.
func (m *ConfigsV3Api) ClustersClusterIdBrokersBrokerIdConfigsalterPostCalled() bool {
	m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Unlock()

	return len(m.calls.ClustersClusterIdBrokersBrokerIdConfigsalterPost) > 0
}

// ClustersClusterIdBrokersBrokerIdConfigsalterPostCalls returns the calls made to ClustersClusterIdBrokersBrokerIdConfigsalterPost.
func (m *ConfigsV3Api) ClustersClusterIdBrokersBrokerIdConfigsalterPostCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	BrokerId          int32
	LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsalterPostOpts
} {
	m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Unlock()

	return m.calls.ClustersClusterIdBrokersBrokerIdConfigsalterPost
}

// ClustersClusterIdBrokersConfigsGet mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ClustersClusterIdBrokersConfigsGet(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerConfigDataList, *net_http.Response, error) {
	m.lockClustersClusterIdBrokersConfigsGet.Lock()
	defer m.lockClustersClusterIdBrokersConfigsGet.Unlock()

	if m.ClustersClusterIdBrokersConfigsGetFunc == nil {
		panic("mocker: ConfigsV3Api.ClustersClusterIdBrokersConfigsGetFunc is nil but ConfigsV3Api.ClustersClusterIdBrokersConfigsGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.ClustersClusterIdBrokersConfigsGet = append(m.calls.ClustersClusterIdBrokersConfigsGet, call)

	return m.ClustersClusterIdBrokersConfigsGetFunc(ctx, clusterId)
}

// ClustersClusterIdBrokersConfigsGetCalled returns true if ClustersClusterIdBrokersConfigsGet was called at least once.
func (m *ConfigsV3Api) ClustersClusterIdBrokersConfigsGetCalled() bool {
	m.lockClustersClusterIdBrokersConfigsGet.Lock()
	defer m.lockClustersClusterIdBrokersConfigsGet.Unlock()

	return len(m.calls.ClustersClusterIdBrokersConfigsGet) > 0
}

// ClustersClusterIdBrokersConfigsGetCalls returns the calls made to ClustersClusterIdBrokersConfigsGet.
func (m *ConfigsV3Api) ClustersClusterIdBrokersConfigsGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockClustersClusterIdBrokersConfigsGet.Lock()
	defer m.lockClustersClusterIdBrokersConfigsGet.Unlock()

	return m.calls.ClustersClusterIdBrokersConfigsGet
}

// DeleteKafkaClusterConfig mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) DeleteKafkaClusterConfig(ctx context.Context, clusterId, name string) (*net_http.Response, error) {
	m.lockDeleteKafkaClusterConfig.Lock()
	defer m.lockDeleteKafkaClusterConfig.Unlock()

	if m.DeleteKafkaClusterConfigFunc == nil {
		panic("mocker: ConfigsV3Api.DeleteKafkaClusterConfigFunc is nil but ConfigsV3Api.DeleteKafkaClusterConfig was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		Name:      name,
	}

	m.calls.DeleteKafkaClusterConfig = append(m.calls.DeleteKafkaClusterConfig, call)

	return m.DeleteKafkaClusterConfigFunc(ctx, clusterId, name)
}

// DeleteKafkaClusterConfigCalled returns true if DeleteKafkaClusterConfig was called at least once.
func (m *ConfigsV3Api) DeleteKafkaClusterConfigCalled() bool {
	m.lockDeleteKafkaClusterConfig.Lock()
	defer m.lockDeleteKafkaClusterConfig.Unlock()

	return len(m.calls.DeleteKafkaClusterConfig) > 0
}

// DeleteKafkaClusterConfigCalls returns the calls made to DeleteKafkaClusterConfig.
func (m *ConfigsV3Api) DeleteKafkaClusterConfigCalls() []struct {
	Ctx       context.Context
	ClusterId string
	Name      string
} {
	m.lockDeleteKafkaClusterConfig.Lock()
	defer m.lockDeleteKafkaClusterConfig.Unlock()

	return m.calls.DeleteKafkaClusterConfig
}

// DeleteKafkaTopicConfig mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) DeleteKafkaTopicConfig(ctx context.Context, clusterId, topicName, name string) (*net_http.Response, error) {
	m.lockDeleteKafkaTopicConfig.Lock()
	defer m.lockDeleteKafkaTopicConfig.Unlock()

	if m.DeleteKafkaTopicConfigFunc == nil {
		panic("mocker: ConfigsV3Api.DeleteKafkaTopicConfigFunc is nil but ConfigsV3Api.DeleteKafkaTopicConfig was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
		Name:      name,
	}

	m.calls.DeleteKafkaTopicConfig = append(m.calls.DeleteKafkaTopicConfig, call)

	return m.DeleteKafkaTopicConfigFunc(ctx, clusterId, topicName, name)
}

// DeleteKafkaTopicConfigCalled returns true if DeleteKafkaTopicConfig was called at least once.
func (m *ConfigsV3Api) DeleteKafkaTopicConfigCalled() bool {
	m.lockDeleteKafkaTopicConfig.Lock()
	defer m.lockDeleteKafkaTopicConfig.Unlock()

	return len(m.calls.DeleteKafkaTopicConfig) > 0
}

// DeleteKafkaTopicConfigCalls returns the calls made to DeleteKafkaTopicConfig.
func (m *ConfigsV3Api) DeleteKafkaTopicConfigCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
	Name      string
} {
	m.lockDeleteKafkaTopicConfig.Lock()
	defer m.lockDeleteKafkaTopicConfig.Unlock()

	return m.calls.DeleteKafkaTopicConfig
}

// GetKafkaClusterConfig mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) GetKafkaClusterConfig(ctx context.Context, clusterId, name string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClusterConfigData, *net_http.Response, error) {
	m.lockGetKafkaClusterConfig.Lock()
	defer m.lockGetKafkaClusterConfig.Unlock()

	if m.GetKafkaClusterConfigFunc == nil {
		panic("mocker: ConfigsV3Api.GetKafkaClusterConfigFunc is nil but ConfigsV3Api.GetKafkaClusterConfig was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		Name:      name,
	}

	m.calls.GetKafkaClusterConfig = append(m.calls.GetKafkaClusterConfig, call)

	return m.GetKafkaClusterConfigFunc(ctx, clusterId, name)
}

// GetKafkaClusterConfigCalled returns true if GetKafkaClusterConfig was called at least once.
func (m *ConfigsV3Api) GetKafkaClusterConfigCalled() bool {
	m.lockGetKafkaClusterConfig.Lock()
	defer m.lockGetKafkaClusterConfig.Unlock()

	return len(m.calls.GetKafkaClusterConfig) > 0
}

// GetKafkaClusterConfigCalls returns the calls made to GetKafkaClusterConfig.
func (m *ConfigsV3Api) GetKafkaClusterConfigCalls() []struct {
	Ctx       context.Context
	ClusterId string
	Name      string
} {
	m.lockGetKafkaClusterConfig.Lock()
	defer m.lockGetKafkaClusterConfig.Unlock()

	return m.calls.GetKafkaClusterConfig
}

// GetKafkaTopicConfig mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) GetKafkaTopicConfig(ctx context.Context, clusterId, topicName, name string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.TopicConfigData, *net_http.Response, error) {
	m.lockGetKafkaTopicConfig.Lock()
	defer m.lockGetKafkaTopicConfig.Unlock()

	if m.GetKafkaTopicConfigFunc == nil {
		panic("mocker: ConfigsV3Api.GetKafkaTopicConfigFunc is nil but ConfigsV3Api.GetKafkaTopicConfig was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
		Name:      name,
	}

	m.calls.GetKafkaTopicConfig = append(m.calls.GetKafkaTopicConfig, call)

	return m.GetKafkaTopicConfigFunc(ctx, clusterId, topicName, name)
}

// GetKafkaTopicConfigCalled returns true if GetKafkaTopicConfig was called at least once.
func (m *ConfigsV3Api) GetKafkaTopicConfigCalled() bool {
	m.lockGetKafkaTopicConfig.Lock()
	defer m.lockGetKafkaTopicConfig.Unlock()

	return len(m.calls.GetKafkaTopicConfig) > 0
}

// GetKafkaTopicConfigCalls returns the calls made to GetKafkaTopicConfig.
func (m *ConfigsV3Api) GetKafkaTopicConfigCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
	Name      string
} {
	m.lockGetKafkaTopicConfig.Lock()
	defer m.lockGetKafkaTopicConfig.Unlock()

	return m.calls.GetKafkaTopicConfig
}

// ListKafkaAllTopicConfigs mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ListKafkaAllTopicConfigs(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.TopicConfigDataList, *net_http.Response, error) {
	m.lockListKafkaAllTopicConfigs.Lock()
	defer m.lockListKafkaAllTopicConfigs.Unlock()

	if m.ListKafkaAllTopicConfigsFunc == nil {
		panic("mocker: ConfigsV3Api.ListKafkaAllTopicConfigsFunc is nil but ConfigsV3Api.ListKafkaAllTopicConfigs was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.ListKafkaAllTopicConfigs = append(m.calls.ListKafkaAllTopicConfigs, call)

	return m.ListKafkaAllTopicConfigsFunc(ctx, clusterId)
}

// ListKafkaAllTopicConfigsCalled returns true if ListKafkaAllTopicConfigs was called at least once.
func (m *ConfigsV3Api) ListKafkaAllTopicConfigsCalled() bool {
	m.lockListKafkaAllTopicConfigs.Lock()
	defer m.lockListKafkaAllTopicConfigs.Unlock()

	return len(m.calls.ListKafkaAllTopicConfigs) > 0
}

// ListKafkaAllTopicConfigsCalls returns the calls made to ListKafkaAllTopicConfigs.
func (m *ConfigsV3Api) ListKafkaAllTopicConfigsCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockListKafkaAllTopicConfigs.Lock()
	defer m.lockListKafkaAllTopicConfigs.Unlock()

	return m.calls.ListKafkaAllTopicConfigs
}

// ListKafkaClusterConfigs mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ListKafkaClusterConfigs(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClusterConfigDataList, *net_http.Response, error) {
	m.lockListKafkaClusterConfigs.Lock()
	defer m.lockListKafkaClusterConfigs.Unlock()

	if m.ListKafkaClusterConfigsFunc == nil {
		panic("mocker: ConfigsV3Api.ListKafkaClusterConfigsFunc is nil but ConfigsV3Api.ListKafkaClusterConfigs was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.ListKafkaClusterConfigs = append(m.calls.ListKafkaClusterConfigs, call)

	return m.ListKafkaClusterConfigsFunc(ctx, clusterId)
}

// ListKafkaClusterConfigsCalled returns true if ListKafkaClusterConfigs was called at least once.
func (m *ConfigsV3Api) ListKafkaClusterConfigsCalled() bool {
	m.lockListKafkaClusterConfigs.Lock()
	defer m.lockListKafkaClusterConfigs.Unlock()

	return len(m.calls.ListKafkaClusterConfigs) > 0
}

// ListKafkaClusterConfigsCalls returns the calls made to ListKafkaClusterConfigs.
func (m *ConfigsV3Api) ListKafkaClusterConfigsCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockListKafkaClusterConfigs.Lock()
	defer m.lockListKafkaClusterConfigs.Unlock()

	return m.calls.ListKafkaClusterConfigs
}

// ListKafkaDefaultTopicConfigs mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ListKafkaDefaultTopicConfigs(ctx context.Context, clusterId, topicName string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.TopicConfigDataList, *net_http.Response, error) {
	m.lockListKafkaDefaultTopicConfigs.Lock()
	defer m.lockListKafkaDefaultTopicConfigs.Unlock()

	if m.ListKafkaDefaultTopicConfigsFunc == nil {
		panic("mocker: ConfigsV3Api.ListKafkaDefaultTopicConfigsFunc is nil but ConfigsV3Api.ListKafkaDefaultTopicConfigs was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
	}

	m.calls.ListKafkaDefaultTopicConfigs = append(m.calls.ListKafkaDefaultTopicConfigs, call)

	return m.ListKafkaDefaultTopicConfigsFunc(ctx, clusterId, topicName)
}

// ListKafkaDefaultTopicConfigsCalled returns true if ListKafkaDefaultTopicConfigs was called at least once.
func (m *ConfigsV3Api) ListKafkaDefaultTopicConfigsCalled() bool {
	m.lockListKafkaDefaultTopicConfigs.Lock()
	defer m.lockListKafkaDefaultTopicConfigs.Unlock()

	return len(m.calls.ListKafkaDefaultTopicConfigs) > 0
}

// ListKafkaDefaultTopicConfigsCalls returns the calls made to ListKafkaDefaultTopicConfigs.
func (m *ConfigsV3Api) ListKafkaDefaultTopicConfigsCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
} {
	m.lockListKafkaDefaultTopicConfigs.Lock()
	defer m.lockListKafkaDefaultTopicConfigs.Unlock()

	return m.calls.ListKafkaDefaultTopicConfigs
}

// ListKafkaTopicConfigs mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) ListKafkaTopicConfigs(ctx context.Context, clusterId, topicName string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.TopicConfigDataList, *net_http.Response, error) {
	m.lockListKafkaTopicConfigs.Lock()
	defer m.lockListKafkaTopicConfigs.Unlock()

	if m.ListKafkaTopicConfigsFunc == nil {
		panic("mocker: ConfigsV3Api.ListKafkaTopicConfigsFunc is nil but ConfigsV3Api.ListKafkaTopicConfigs was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
	}

	m.calls.ListKafkaTopicConfigs = append(m.calls.ListKafkaTopicConfigs, call)

	return m.ListKafkaTopicConfigsFunc(ctx, clusterId, topicName)
}

// ListKafkaTopicConfigsCalled returns true if ListKafkaTopicConfigs was called at least once.
func (m *ConfigsV3Api) ListKafkaTopicConfigsCalled() bool {
	m.lockListKafkaTopicConfigs.Lock()
	defer m.lockListKafkaTopicConfigs.Unlock()

	return len(m.calls.ListKafkaTopicConfigs) > 0
}

// ListKafkaTopicConfigsCalls returns the calls made to ListKafkaTopicConfigs.
func (m *ConfigsV3Api) ListKafkaTopicConfigsCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
} {
	m.lockListKafkaTopicConfigs.Lock()
	defer m.lockListKafkaTopicConfigs.Unlock()

	return m.calls.ListKafkaTopicConfigs
}

// UpdateKafkaClusterConfig mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) UpdateKafkaClusterConfig(ctx context.Context, clusterId, name string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaClusterConfigOpts) (*net_http.Response, error) {
	m.lockUpdateKafkaClusterConfig.Lock()
	defer m.lockUpdateKafkaClusterConfig.Unlock()

	if m.UpdateKafkaClusterConfigFunc == nil {
		panic("mocker: ConfigsV3Api.UpdateKafkaClusterConfigFunc is nil but ConfigsV3Api.UpdateKafkaClusterConfig was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		Name              string
		LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaClusterConfigOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		Name:              name,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.UpdateKafkaClusterConfig = append(m.calls.UpdateKafkaClusterConfig, call)

	return m.UpdateKafkaClusterConfigFunc(ctx, clusterId, name, localVarOptionals)
}

// UpdateKafkaClusterConfigCalled returns true if UpdateKafkaClusterConfig was called at least once.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigCalled() bool {
	m.lockUpdateKafkaClusterConfig.Lock()
	defer m.lockUpdateKafkaClusterConfig.Unlock()

	return len(m.calls.UpdateKafkaClusterConfig) > 0
}

// UpdateKafkaClusterConfigCalls returns the calls made to UpdateKafkaClusterConfig.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	Name              string
	LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaClusterConfigOpts
} {
	m.lockUpdateKafkaClusterConfig.Lock()
	defer m.lockUpdateKafkaClusterConfig.Unlock()

	return m.calls.UpdateKafkaClusterConfig
}

// UpdateKafkaClusterConfigs mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigs(ctx context.Context, clusterId string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaClusterConfigsOpts) (*net_http.Response, error) {
	m.lockUpdateKafkaClusterConfigs.Lock()
	defer m.lockUpdateKafkaClusterConfigs.Unlock()

	if m.UpdateKafkaClusterConfigsFunc == nil {
		panic("mocker: ConfigsV3Api.UpdateKafkaClusterConfigsFunc is nil but ConfigsV3Api.UpdateKafkaClusterConfigs was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaClusterConfigsOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.UpdateKafkaClusterConfigs = append(m.calls.UpdateKafkaClusterConfigs, call)

	return m.UpdateKafkaClusterConfigsFunc(ctx, clusterId, localVarOptionals)
}

// UpdateKafkaClusterConfigsCalled returns true if UpdateKafkaClusterConfigs was called at least once.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigsCalled() bool {
	m.lockUpdateKafkaClusterConfigs.Lock()
	defer m.lockUpdateKafkaClusterConfigs.Unlock()

	return len(m.calls.UpdateKafkaClusterConfigs) > 0
}

// UpdateKafkaClusterConfigsCalls returns the calls made to UpdateKafkaClusterConfigs.
func (m *ConfigsV3Api) UpdateKafkaClusterConfigsCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaClusterConfigsOpts
} {
	m.lockUpdateKafkaClusterConfigs.Lock()
	defer m.lockUpdateKafkaClusterConfigs.Unlock()

	return m.calls.UpdateKafkaClusterConfigs
}

// UpdateKafkaTopicConfig mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) UpdateKafkaTopicConfig(ctx context.Context, clusterId, topicName, name string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaTopicConfigOpts) (*net_http.Response, error) {
	m.lockUpdateKafkaTopicConfig.Lock()
	defer m.lockUpdateKafkaTopicConfig.Unlock()

	if m.UpdateKafkaTopicConfigFunc == nil {
		panic("mocker: ConfigsV3Api.UpdateKafkaTopicConfigFunc is nil but ConfigsV3Api.UpdateKafkaTopicConfig was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		TopicName         string
		Name              string
		LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaTopicConfigOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		TopicName:         topicName,
		Name:              name,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.UpdateKafkaTopicConfig = append(m.calls.UpdateKafkaTopicConfig, call)

	return m.UpdateKafkaTopicConfigFunc(ctx, clusterId, topicName, name, localVarOptionals)
}

// UpdateKafkaTopicConfigCalled returns true if UpdateKafkaTopicConfig was called at least once.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigCalled() bool {
	m.lockUpdateKafkaTopicConfig.Lock()
	defer m.lockUpdateKafkaTopicConfig.Unlock()

	return len(m.calls.UpdateKafkaTopicConfig) > 0
}

// UpdateKafkaTopicConfigCalls returns the calls made to UpdateKafkaTopicConfig.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	TopicName         string
	Name              string
	LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaTopicConfigOpts
} {
	m.lockUpdateKafkaTopicConfig.Lock()
	defer m.lockUpdateKafkaTopicConfig.Unlock()

	return m.calls.UpdateKafkaTopicConfig
}

// UpdateKafkaTopicConfigBatch mocks base method by wrapping the associated func.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigBatch(ctx context.Context, clusterId, topicName string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaTopicConfigBatchOpts) (*net_http.Response, error) {
	m.lockUpdateKafkaTopicConfigBatch.Lock()
	defer m.lockUpdateKafkaTopicConfigBatch.Unlock()

	if m.UpdateKafkaTopicConfigBatchFunc == nil {
		panic("mocker: ConfigsV3Api.UpdateKafkaTopicConfigBatchFunc is nil but ConfigsV3Api.UpdateKafkaTopicConfigBatch was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		TopicName         string
		LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaTopicConfigBatchOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		TopicName:         topicName,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.UpdateKafkaTopicConfigBatch = append(m.calls.UpdateKafkaTopicConfigBatch, call)

	return m.UpdateKafkaTopicConfigBatchFunc(ctx, clusterId, topicName, localVarOptionals)
}

// UpdateKafkaTopicConfigBatchCalled returns true if UpdateKafkaTopicConfigBatch was called at least once.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigBatchCalled() bool {
	m.lockUpdateKafkaTopicConfigBatch.Lock()
	defer m.lockUpdateKafkaTopicConfigBatch.Unlock()

	return len(m.calls.UpdateKafkaTopicConfigBatch) > 0
}

// UpdateKafkaTopicConfigBatchCalls returns the calls made to UpdateKafkaTopicConfigBatch.
func (m *ConfigsV3Api) UpdateKafkaTopicConfigBatchCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	TopicName         string
	LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.UpdateKafkaTopicConfigBatchOpts
} {
	m.lockUpdateKafkaTopicConfigBatch.Lock()
	defer m.lockUpdateKafkaTopicConfigBatch.Unlock()

	return m.calls.UpdateKafkaTopicConfigBatch
}

// Reset resets the calls made to the mocked methods.
func (m *ConfigsV3Api) Reset() {
	m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Lock()
	m.calls.ClustersClusterIdBrokersBrokerIdConfigsGet = nil
	m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Unlock()
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Lock()
	m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameDelete = nil
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Unlock()
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Lock()
	m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameGet = nil
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Unlock()
	m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Lock()
	m.calls.ClustersClusterIdBrokersBrokerIdConfigsNamePut = nil
	m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Unlock()
	m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Lock()
	m.calls.ClustersClusterIdBrokersBrokerIdConfigsalterPost = nil
	m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Unlock()
	m.lockClustersClusterIdBrokersConfigsGet.Lock()
	m.calls.ClustersClusterIdBrokersConfigsGet = nil
	m.lockClustersClusterIdBrokersConfigsGet.Unlock()
	m.lockDeleteKafkaClusterConfig.Lock()
	m.calls.DeleteKafkaClusterConfig = nil
	m.lockDeleteKafkaClusterConfig.Unlock()
	m.lockDeleteKafkaTopicConfig.Lock()
	m.calls.DeleteKafkaTopicConfig = nil
	m.lockDeleteKafkaTopicConfig.Unlock()
	m.lockGetKafkaClusterConfig.Lock()
	m.calls.GetKafkaClusterConfig = nil
	m.lockGetKafkaClusterConfig.Unlock()
	m.lockGetKafkaTopicConfig.Lock()
	m.calls.GetKafkaTopicConfig = nil
	m.lockGetKafkaTopicConfig.Unlock()
	m.lockListKafkaAllTopicConfigs.Lock()
	m.calls.ListKafkaAllTopicConfigs = nil
	m.lockListKafkaAllTopicConfigs.Unlock()
	m.lockListKafkaClusterConfigs.Lock()
	m.calls.ListKafkaClusterConfigs = nil
	m.lockListKafkaClusterConfigs.Unlock()
	m.lockListKafkaDefaultTopicConfigs.Lock()
	m.calls.ListKafkaDefaultTopicConfigs = nil
	m.lockListKafkaDefaultTopicConfigs.Unlock()
	m.lockListKafkaTopicConfigs.Lock()
	m.calls.ListKafkaTopicConfigs = nil
	m.lockListKafkaTopicConfigs.Unlock()
	m.lockUpdateKafkaClusterConfig.Lock()
	m.calls.UpdateKafkaClusterConfig = nil
	m.lockUpdateKafkaClusterConfig.Unlock()
	m.lockUpdateKafkaClusterConfigs.Lock()
	m.calls.UpdateKafkaClusterConfigs = nil
	m.lockUpdateKafkaClusterConfigs.Unlock()
	m.lockUpdateKafkaTopicConfig.Lock()
	m.calls.UpdateKafkaTopicConfig = nil
	m.lockUpdateKafkaTopicConfig.Unlock()
	m.lockUpdateKafkaTopicConfigBatch.Lock()
	m.calls.UpdateKafkaTopicConfigBatch = nil
	m.lockUpdateKafkaTopicConfigBatch.Unlock()
}
