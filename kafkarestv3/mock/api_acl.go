// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: ../kafka-rest-sdk-go/kafkarestv3/api_acl.go

package mock

import (
	command_line_arguments "command-line-arguments"
	context "context"
	net_http "net/http"
	sync "sync"
)

// ACLApi is a mock of ACLApi interface
type ACLApi struct {
	lockClustersClusterIdAclsDelete sync.Mutex
	ClustersClusterIdAclsDeleteFunc func(ctx context.Context, clusterId string, localVarOptionals *command_line_arguments.ClustersClusterIdAclsDeleteOpts) (command_line_arguments.InlineResponse200, *net_http.Response, error)

	lockClustersClusterIdAclsGet sync.Mutex
	ClustersClusterIdAclsGetFunc func(ctx context.Context, clusterId string, localVarOptionals *command_line_arguments.ClustersClusterIdAclsGetOpts) (command_line_arguments.AclDataList, *net_http.Response, error)

	lockClustersClusterIdAclsPost sync.Mutex
	ClustersClusterIdAclsPostFunc func(ctx context.Context, clusterId string, localVarOptionals *command_line_arguments.ClustersClusterIdAclsPostOpts) (*net_http.Response, error)

	calls struct {
		ClustersClusterIdAclsDelete []struct {
			Ctx               context.Context
			ClusterId         string
			LocalVarOptionals *command_line_arguments.ClustersClusterIdAclsDeleteOpts
		}
		ClustersClusterIdAclsGet []struct {
			Ctx               context.Context
			ClusterId         string
			LocalVarOptionals *command_line_arguments.ClustersClusterIdAclsGetOpts
		}
		ClustersClusterIdAclsPost []struct {
			Ctx               context.Context
			ClusterId         string
			LocalVarOptionals *command_line_arguments.ClustersClusterIdAclsPostOpts
		}
	}
}

// ClustersClusterIdAclsDelete mocks base method by wrapping the associated func.
func (m *ACLApi) ClustersClusterIdAclsDelete(ctx context.Context, clusterId string, localVarOptionals *command_line_arguments.ClustersClusterIdAclsDeleteOpts) (command_line_arguments.InlineResponse200, *net_http.Response, error) {
	m.lockClustersClusterIdAclsDelete.Lock()
	defer m.lockClustersClusterIdAclsDelete.Unlock()

	if m.ClustersClusterIdAclsDeleteFunc == nil {
		panic("mocker: ACLApi.ClustersClusterIdAclsDeleteFunc is nil but ACLApi.ClustersClusterIdAclsDelete was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		LocalVarOptionals *command_line_arguments.ClustersClusterIdAclsDeleteOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdAclsDelete = append(m.calls.ClustersClusterIdAclsDelete, call)

	return m.ClustersClusterIdAclsDeleteFunc(ctx, clusterId, localVarOptionals)
}

// ClustersClusterIdAclsDeleteCalled returns true if ClustersClusterIdAclsDelete was called at least once.
func (m *ACLApi) ClustersClusterIdAclsDeleteCalled() bool {
	m.lockClustersClusterIdAclsDelete.Lock()
	defer m.lockClustersClusterIdAclsDelete.Unlock()

	return len(m.calls.ClustersClusterIdAclsDelete) > 0
}

// ClustersClusterIdAclsDeleteCalls returns the calls made to ClustersClusterIdAclsDelete.
func (m *ACLApi) ClustersClusterIdAclsDeleteCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	LocalVarOptionals *command_line_arguments.ClustersClusterIdAclsDeleteOpts
} {
	m.lockClustersClusterIdAclsDelete.Lock()
	defer m.lockClustersClusterIdAclsDelete.Unlock()

	return m.calls.ClustersClusterIdAclsDelete
}

// ClustersClusterIdAclsGet mocks base method by wrapping the associated func.
func (m *ACLApi) ClustersClusterIdAclsGet(ctx context.Context, clusterId string, localVarOptionals *command_line_arguments.ClustersClusterIdAclsGetOpts) (command_line_arguments.AclDataList, *net_http.Response, error) {
	m.lockClustersClusterIdAclsGet.Lock()
	defer m.lockClustersClusterIdAclsGet.Unlock()

	if m.ClustersClusterIdAclsGetFunc == nil {
		panic("mocker: ACLApi.ClustersClusterIdAclsGetFunc is nil but ACLApi.ClustersClusterIdAclsGet was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		LocalVarOptionals *command_line_arguments.ClustersClusterIdAclsGetOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdAclsGet = append(m.calls.ClustersClusterIdAclsGet, call)

	return m.ClustersClusterIdAclsGetFunc(ctx, clusterId, localVarOptionals)
}

// ClustersClusterIdAclsGetCalled returns true if ClustersClusterIdAclsGet was called at least once.
func (m *ACLApi) ClustersClusterIdAclsGetCalled() bool {
	m.lockClustersClusterIdAclsGet.Lock()
	defer m.lockClustersClusterIdAclsGet.Unlock()

	return len(m.calls.ClustersClusterIdAclsGet) > 0
}

// ClustersClusterIdAclsGetCalls returns the calls made to ClustersClusterIdAclsGet.
func (m *ACLApi) ClustersClusterIdAclsGetCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	LocalVarOptionals *command_line_arguments.ClustersClusterIdAclsGetOpts
} {
	m.lockClustersClusterIdAclsGet.Lock()
	defer m.lockClustersClusterIdAclsGet.Unlock()

	return m.calls.ClustersClusterIdAclsGet
}

// ClustersClusterIdAclsPost mocks base method by wrapping the associated func.
func (m *ACLApi) ClustersClusterIdAclsPost(ctx context.Context, clusterId string, localVarOptionals *command_line_arguments.ClustersClusterIdAclsPostOpts) (*net_http.Response, error) {
	m.lockClustersClusterIdAclsPost.Lock()
	defer m.lockClustersClusterIdAclsPost.Unlock()

	if m.ClustersClusterIdAclsPostFunc == nil {
		panic("mocker: ACLApi.ClustersClusterIdAclsPostFunc is nil but ACLApi.ClustersClusterIdAclsPost was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		LocalVarOptionals *command_line_arguments.ClustersClusterIdAclsPostOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdAclsPost = append(m.calls.ClustersClusterIdAclsPost, call)

	return m.ClustersClusterIdAclsPostFunc(ctx, clusterId, localVarOptionals)
}

// ClustersClusterIdAclsPostCalled returns true if ClustersClusterIdAclsPost was called at least once.
func (m *ACLApi) ClustersClusterIdAclsPostCalled() bool {
	m.lockClustersClusterIdAclsPost.Lock()
	defer m.lockClustersClusterIdAclsPost.Unlock()

	return len(m.calls.ClustersClusterIdAclsPost) > 0
}

// ClustersClusterIdAclsPostCalls returns the calls made to ClustersClusterIdAclsPost.
func (m *ACLApi) ClustersClusterIdAclsPostCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	LocalVarOptionals *command_line_arguments.ClustersClusterIdAclsPostOpts
} {
	m.lockClustersClusterIdAclsPost.Lock()
	defer m.lockClustersClusterIdAclsPost.Unlock()

	return m.calls.ClustersClusterIdAclsPost
}

// Reset resets the calls made to the mocked methods.
func (m *ACLApi) Reset() {
	m.lockClustersClusterIdAclsDelete.Lock()
	m.calls.ClustersClusterIdAclsDelete = nil
	m.lockClustersClusterIdAclsDelete.Unlock()
	m.lockClustersClusterIdAclsGet.Lock()
	m.calls.ClustersClusterIdAclsGet = nil
	m.lockClustersClusterIdAclsGet.Unlock()
	m.lockClustersClusterIdAclsPost.Lock()
	m.calls.ClustersClusterIdAclsPost = nil
	m.lockClustersClusterIdAclsPost.Unlock()
}
