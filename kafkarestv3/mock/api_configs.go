// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: ../kafka-rest-sdk-go/kafkarestv3/api_configs.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3 "github.com/confluentinc/kafka-rest-sdk-go/kafkarestv3"
)

// ConfigsApi is a mock of ConfigsApi interface
type ConfigsApi struct {
	lockClustersClusterIdBrokerConfigsGet sync.Mutex
	ClustersClusterIdBrokerConfigsGetFunc func(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClusterConfigDataList, *net_http.Response, error)

	lockClustersClusterIdBrokerConfigsNameDelete sync.Mutex
	ClustersClusterIdBrokerConfigsNameDeleteFunc func(ctx context.Context, clusterId, name string) (*net_http.Response, error)

	lockClustersClusterIdBrokerConfigsNameGet sync.Mutex
	ClustersClusterIdBrokerConfigsNameGetFunc func(ctx context.Context, clusterId, name string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClusterConfigData, *net_http.Response, error)

	lockClustersClusterIdBrokerConfigsNamePut sync.Mutex
	ClustersClusterIdBrokerConfigsNamePutFunc func(ctx context.Context, clusterId, name string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokerConfigsNamePutOpts) (*net_http.Response, error)

	lockClustersClusterIdBrokerConfigsalterPost sync.Mutex
	ClustersClusterIdBrokerConfigsalterPostFunc func(ctx context.Context, clusterId string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokerConfigsalterPostOpts) (*net_http.Response, error)

	lockClustersClusterIdBrokersBrokerIdConfigsGet sync.Mutex
	ClustersClusterIdBrokersBrokerIdConfigsGetFunc func(ctx context.Context, clusterId string, brokerId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerConfigDataList, *net_http.Response, error)

	lockClustersClusterIdBrokersBrokerIdConfigsNameDelete sync.Mutex
	ClustersClusterIdBrokersBrokerIdConfigsNameDeleteFunc func(ctx context.Context, clusterId string, brokerId int32, name string) (*net_http.Response, error)

	lockClustersClusterIdBrokersBrokerIdConfigsNameGet sync.Mutex
	ClustersClusterIdBrokersBrokerIdConfigsNameGetFunc func(ctx context.Context, clusterId string, brokerId int32, name string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerConfigData, *net_http.Response, error)

	lockClustersClusterIdBrokersBrokerIdConfigsNamePut sync.Mutex
	ClustersClusterIdBrokersBrokerIdConfigsNamePutFunc func(ctx context.Context, clusterId string, brokerId int32, name string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsNamePutOpts) (*net_http.Response, error)

	lockClustersClusterIdBrokersBrokerIdConfigsalterPost sync.Mutex
	ClustersClusterIdBrokersBrokerIdConfigsalterPostFunc func(ctx context.Context, clusterId string, brokerId int32, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsalterPostOpts) (*net_http.Response, error)

	lockClustersClusterIdTopicsTopicNameConfigsGet sync.Mutex
	ClustersClusterIdTopicsTopicNameConfigsGetFunc func(ctx context.Context, clusterId, topicName string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.TopicConfigDataList, *net_http.Response, error)

	lockClustersClusterIdTopicsTopicNameConfigsNameDelete sync.Mutex
	ClustersClusterIdTopicsTopicNameConfigsNameDeleteFunc func(ctx context.Context, clusterId, topicName, name string) (*net_http.Response, error)

	lockClustersClusterIdTopicsTopicNameConfigsNameGet sync.Mutex
	ClustersClusterIdTopicsTopicNameConfigsNameGetFunc func(ctx context.Context, clusterId, topicName, name string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.TopicConfigData, *net_http.Response, error)

	lockClustersClusterIdTopicsTopicNameConfigsNamePut sync.Mutex
	ClustersClusterIdTopicsTopicNameConfigsNamePutFunc func(ctx context.Context, clusterId, topicName, name string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdTopicsTopicNameConfigsNamePutOpts) (*net_http.Response, error)

	lockClustersClusterIdTopicsTopicNameConfigsalterPost sync.Mutex
	ClustersClusterIdTopicsTopicNameConfigsalterPostFunc func(ctx context.Context, clusterId, topicName string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdTopicsTopicNameConfigsalterPostOpts) (*net_http.Response, error)

	calls struct {
		ClustersClusterIdBrokerConfigsGet []struct {
			Ctx       context.Context
			ClusterId string
		}
		ClustersClusterIdBrokerConfigsNameDelete []struct {
			Ctx       context.Context
			ClusterId string
			Name      string
		}
		ClustersClusterIdBrokerConfigsNameGet []struct {
			Ctx       context.Context
			ClusterId string
			Name      string
		}
		ClustersClusterIdBrokerConfigsNamePut []struct {
			Ctx               context.Context
			ClusterId         string
			Name              string
			LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokerConfigsNamePutOpts
		}
		ClustersClusterIdBrokerConfigsalterPost []struct {
			Ctx               context.Context
			ClusterId         string
			LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokerConfigsalterPostOpts
		}
		ClustersClusterIdBrokersBrokerIdConfigsGet []struct {
			Ctx       context.Context
			ClusterId string
			BrokerId  int32
		}
		ClustersClusterIdBrokersBrokerIdConfigsNameDelete []struct {
			Ctx       context.Context
			ClusterId string
			BrokerId  int32
			Name      string
		}
		ClustersClusterIdBrokersBrokerIdConfigsNameGet []struct {
			Ctx       context.Context
			ClusterId string
			BrokerId  int32
			Name      string
		}
		ClustersClusterIdBrokersBrokerIdConfigsNamePut []struct {
			Ctx               context.Context
			ClusterId         string
			BrokerId          int32
			Name              string
			LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsNamePutOpts
		}
		ClustersClusterIdBrokersBrokerIdConfigsalterPost []struct {
			Ctx               context.Context
			ClusterId         string
			BrokerId          int32
			LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsalterPostOpts
		}
		ClustersClusterIdTopicsTopicNameConfigsGet []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
		}
		ClustersClusterIdTopicsTopicNameConfigsNameDelete []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
			Name      string
		}
		ClustersClusterIdTopicsTopicNameConfigsNameGet []struct {
			Ctx       context.Context
			ClusterId string
			TopicName string
			Name      string
		}
		ClustersClusterIdTopicsTopicNameConfigsNamePut []struct {
			Ctx               context.Context
			ClusterId         string
			TopicName         string
			Name              string
			LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdTopicsTopicNameConfigsNamePutOpts
		}
		ClustersClusterIdTopicsTopicNameConfigsalterPost []struct {
			Ctx               context.Context
			ClusterId         string
			TopicName         string
			LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdTopicsTopicNameConfigsalterPostOpts
		}
	}
}

// ClustersClusterIdBrokerConfigsGet mocks base method by wrapping the associated func.
func (m *ConfigsApi) ClustersClusterIdBrokerConfigsGet(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClusterConfigDataList, *net_http.Response, error) {
	m.lockClustersClusterIdBrokerConfigsGet.Lock()
	defer m.lockClustersClusterIdBrokerConfigsGet.Unlock()

	if m.ClustersClusterIdBrokerConfigsGetFunc == nil {
		panic("mocker: ConfigsApi.ClustersClusterIdBrokerConfigsGetFunc is nil but ConfigsApi.ClustersClusterIdBrokerConfigsGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.ClustersClusterIdBrokerConfigsGet = append(m.calls.ClustersClusterIdBrokerConfigsGet, call)

	return m.ClustersClusterIdBrokerConfigsGetFunc(ctx, clusterId)
}

// ClustersClusterIdBrokerConfigsGetCalled returns true if ClustersClusterIdBrokerConfigsGet was called at least once.
func (m *ConfigsApi) ClustersClusterIdBrokerConfigsGetCalled() bool {
	m.lockClustersClusterIdBrokerConfigsGet.Lock()
	defer m.lockClustersClusterIdBrokerConfigsGet.Unlock()

	return len(m.calls.ClustersClusterIdBrokerConfigsGet) > 0
}

// ClustersClusterIdBrokerConfigsGetCalls returns the calls made to ClustersClusterIdBrokerConfigsGet.
func (m *ConfigsApi) ClustersClusterIdBrokerConfigsGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockClustersClusterIdBrokerConfigsGet.Lock()
	defer m.lockClustersClusterIdBrokerConfigsGet.Unlock()

	return m.calls.ClustersClusterIdBrokerConfigsGet
}

// ClustersClusterIdBrokerConfigsNameDelete mocks base method by wrapping the associated func.
func (m *ConfigsApi) ClustersClusterIdBrokerConfigsNameDelete(ctx context.Context, clusterId, name string) (*net_http.Response, error) {
	m.lockClustersClusterIdBrokerConfigsNameDelete.Lock()
	defer m.lockClustersClusterIdBrokerConfigsNameDelete.Unlock()

	if m.ClustersClusterIdBrokerConfigsNameDeleteFunc == nil {
		panic("mocker: ConfigsApi.ClustersClusterIdBrokerConfigsNameDeleteFunc is nil but ConfigsApi.ClustersClusterIdBrokerConfigsNameDelete was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		Name:      name,
	}

	m.calls.ClustersClusterIdBrokerConfigsNameDelete = append(m.calls.ClustersClusterIdBrokerConfigsNameDelete, call)

	return m.ClustersClusterIdBrokerConfigsNameDeleteFunc(ctx, clusterId, name)
}

// ClustersClusterIdBrokerConfigsNameDeleteCalled returns true if ClustersClusterIdBrokerConfigsNameDelete was called at least once.
func (m *ConfigsApi) ClustersClusterIdBrokerConfigsNameDeleteCalled() bool {
	m.lockClustersClusterIdBrokerConfigsNameDelete.Lock()
	defer m.lockClustersClusterIdBrokerConfigsNameDelete.Unlock()

	return len(m.calls.ClustersClusterIdBrokerConfigsNameDelete) > 0
}

// ClustersClusterIdBrokerConfigsNameDeleteCalls returns the calls made to ClustersClusterIdBrokerConfigsNameDelete.
func (m *ConfigsApi) ClustersClusterIdBrokerConfigsNameDeleteCalls() []struct {
	Ctx       context.Context
	ClusterId string
	Name      string
} {
	m.lockClustersClusterIdBrokerConfigsNameDelete.Lock()
	defer m.lockClustersClusterIdBrokerConfigsNameDelete.Unlock()

	return m.calls.ClustersClusterIdBrokerConfigsNameDelete
}

// ClustersClusterIdBrokerConfigsNameGet mocks base method by wrapping the associated func.
func (m *ConfigsApi) ClustersClusterIdBrokerConfigsNameGet(ctx context.Context, clusterId, name string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClusterConfigData, *net_http.Response, error) {
	m.lockClustersClusterIdBrokerConfigsNameGet.Lock()
	defer m.lockClustersClusterIdBrokerConfigsNameGet.Unlock()

	if m.ClustersClusterIdBrokerConfigsNameGetFunc == nil {
		panic("mocker: ConfigsApi.ClustersClusterIdBrokerConfigsNameGetFunc is nil but ConfigsApi.ClustersClusterIdBrokerConfigsNameGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		Name:      name,
	}

	m.calls.ClustersClusterIdBrokerConfigsNameGet = append(m.calls.ClustersClusterIdBrokerConfigsNameGet, call)

	return m.ClustersClusterIdBrokerConfigsNameGetFunc(ctx, clusterId, name)
}

// ClustersClusterIdBrokerConfigsNameGetCalled returns true if ClustersClusterIdBrokerConfigsNameGet was called at least once.
func (m *ConfigsApi) ClustersClusterIdBrokerConfigsNameGetCalled() bool {
	m.lockClustersClusterIdBrokerConfigsNameGet.Lock()
	defer m.lockClustersClusterIdBrokerConfigsNameGet.Unlock()

	return len(m.calls.ClustersClusterIdBrokerConfigsNameGet) > 0
}

// ClustersClusterIdBrokerConfigsNameGetCalls returns the calls made to ClustersClusterIdBrokerConfigsNameGet.
func (m *ConfigsApi) ClustersClusterIdBrokerConfigsNameGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
	Name      string
} {
	m.lockClustersClusterIdBrokerConfigsNameGet.Lock()
	defer m.lockClustersClusterIdBrokerConfigsNameGet.Unlock()

	return m.calls.ClustersClusterIdBrokerConfigsNameGet
}

// ClustersClusterIdBrokerConfigsNamePut mocks base method by wrapping the associated func.
func (m *ConfigsApi) ClustersClusterIdBrokerConfigsNamePut(ctx context.Context, clusterId, name string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokerConfigsNamePutOpts) (*net_http.Response, error) {
	m.lockClustersClusterIdBrokerConfigsNamePut.Lock()
	defer m.lockClustersClusterIdBrokerConfigsNamePut.Unlock()

	if m.ClustersClusterIdBrokerConfigsNamePutFunc == nil {
		panic("mocker: ConfigsApi.ClustersClusterIdBrokerConfigsNamePutFunc is nil but ConfigsApi.ClustersClusterIdBrokerConfigsNamePut was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		Name              string
		LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokerConfigsNamePutOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		Name:              name,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdBrokerConfigsNamePut = append(m.calls.ClustersClusterIdBrokerConfigsNamePut, call)

	return m.ClustersClusterIdBrokerConfigsNamePutFunc(ctx, clusterId, name, localVarOptionals)
}

// ClustersClusterIdBrokerConfigsNamePutCalled returns true if ClustersClusterIdBrokerConfigsNamePut was called at least once.
func (m *ConfigsApi) ClustersClusterIdBrokerConfigsNamePutCalled() bool {
	m.lockClustersClusterIdBrokerConfigsNamePut.Lock()
	defer m.lockClustersClusterIdBrokerConfigsNamePut.Unlock()

	return len(m.calls.ClustersClusterIdBrokerConfigsNamePut) > 0
}

// ClustersClusterIdBrokerConfigsNamePutCalls returns the calls made to ClustersClusterIdBrokerConfigsNamePut.
func (m *ConfigsApi) ClustersClusterIdBrokerConfigsNamePutCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	Name              string
	LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokerConfigsNamePutOpts
} {
	m.lockClustersClusterIdBrokerConfigsNamePut.Lock()
	defer m.lockClustersClusterIdBrokerConfigsNamePut.Unlock()

	return m.calls.ClustersClusterIdBrokerConfigsNamePut
}

// ClustersClusterIdBrokerConfigsalterPost mocks base method by wrapping the associated func.
func (m *ConfigsApi) ClustersClusterIdBrokerConfigsalterPost(ctx context.Context, clusterId string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokerConfigsalterPostOpts) (*net_http.Response, error) {
	m.lockClustersClusterIdBrokerConfigsalterPost.Lock()
	defer m.lockClustersClusterIdBrokerConfigsalterPost.Unlock()

	if m.ClustersClusterIdBrokerConfigsalterPostFunc == nil {
		panic("mocker: ConfigsApi.ClustersClusterIdBrokerConfigsalterPostFunc is nil but ConfigsApi.ClustersClusterIdBrokerConfigsalterPost was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokerConfigsalterPostOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdBrokerConfigsalterPost = append(m.calls.ClustersClusterIdBrokerConfigsalterPost, call)

	return m.ClustersClusterIdBrokerConfigsalterPostFunc(ctx, clusterId, localVarOptionals)
}

// ClustersClusterIdBrokerConfigsalterPostCalled returns true if ClustersClusterIdBrokerConfigsalterPost was called at least once.
func (m *ConfigsApi) ClustersClusterIdBrokerConfigsalterPostCalled() bool {
	m.lockClustersClusterIdBrokerConfigsalterPost.Lock()
	defer m.lockClustersClusterIdBrokerConfigsalterPost.Unlock()

	return len(m.calls.ClustersClusterIdBrokerConfigsalterPost) > 0
}

// ClustersClusterIdBrokerConfigsalterPostCalls returns the calls made to ClustersClusterIdBrokerConfigsalterPost.
func (m *ConfigsApi) ClustersClusterIdBrokerConfigsalterPostCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokerConfigsalterPostOpts
} {
	m.lockClustersClusterIdBrokerConfigsalterPost.Lock()
	defer m.lockClustersClusterIdBrokerConfigsalterPost.Unlock()

	return m.calls.ClustersClusterIdBrokerConfigsalterPost
}

// ClustersClusterIdBrokersBrokerIdConfigsGet mocks base method by wrapping the associated func.
func (m *ConfigsApi) ClustersClusterIdBrokersBrokerIdConfigsGet(ctx context.Context, clusterId string, brokerId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerConfigDataList, *net_http.Response, error) {
	m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Unlock()

	if m.ClustersClusterIdBrokersBrokerIdConfigsGetFunc == nil {
		panic("mocker: ConfigsApi.ClustersClusterIdBrokersBrokerIdConfigsGetFunc is nil but ConfigsApi.ClustersClusterIdBrokersBrokerIdConfigsGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		BrokerId  int32
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		BrokerId:  brokerId,
	}

	m.calls.ClustersClusterIdBrokersBrokerIdConfigsGet = append(m.calls.ClustersClusterIdBrokersBrokerIdConfigsGet, call)

	return m.ClustersClusterIdBrokersBrokerIdConfigsGetFunc(ctx, clusterId, brokerId)
}

// ClustersClusterIdBrokersBrokerIdConfigsGetCalled returns true if ClustersClusterIdBrokersBrokerIdConfigsGet was called at least once.
func (m *ConfigsApi) ClustersClusterIdBrokersBrokerIdConfigsGetCalled() bool {
	m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Unlock()

	return len(m.calls.ClustersClusterIdBrokersBrokerIdConfigsGet) > 0
}

// ClustersClusterIdBrokersBrokerIdConfigsGetCalls returns the calls made to ClustersClusterIdBrokersBrokerIdConfigsGet.
func (m *ConfigsApi) ClustersClusterIdBrokersBrokerIdConfigsGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
	BrokerId  int32
} {
	m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Unlock()

	return m.calls.ClustersClusterIdBrokersBrokerIdConfigsGet
}

// ClustersClusterIdBrokersBrokerIdConfigsNameDelete mocks base method by wrapping the associated func.
func (m *ConfigsApi) ClustersClusterIdBrokersBrokerIdConfigsNameDelete(ctx context.Context, clusterId string, brokerId int32, name string) (*net_http.Response, error) {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Unlock()

	if m.ClustersClusterIdBrokersBrokerIdConfigsNameDeleteFunc == nil {
		panic("mocker: ConfigsApi.ClustersClusterIdBrokersBrokerIdConfigsNameDeleteFunc is nil but ConfigsApi.ClustersClusterIdBrokersBrokerIdConfigsNameDelete was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		BrokerId  int32
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		BrokerId:  brokerId,
		Name:      name,
	}

	m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameDelete = append(m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameDelete, call)

	return m.ClustersClusterIdBrokersBrokerIdConfigsNameDeleteFunc(ctx, clusterId, brokerId, name)
}

// ClustersClusterIdBrokersBrokerIdConfigsNameDeleteCalled returns true if ClustersClusterIdBrokersBrokerIdConfigsNameDelete was called at least once.
func (m *ConfigsApi) ClustersClusterIdBrokersBrokerIdConfigsNameDeleteCalled() bool {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Unlock()

	return len(m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameDelete) > 0
}

// ClustersClusterIdBrokersBrokerIdConfigsNameDeleteCalls returns the calls made to ClustersClusterIdBrokersBrokerIdConfigsNameDelete.
func (m *ConfigsApi) ClustersClusterIdBrokersBrokerIdConfigsNameDeleteCalls() []struct {
	Ctx       context.Context
	ClusterId string
	BrokerId  int32
	Name      string
} {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Unlock()

	return m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameDelete
}

// ClustersClusterIdBrokersBrokerIdConfigsNameGet mocks base method by wrapping the associated func.
func (m *ConfigsApi) ClustersClusterIdBrokersBrokerIdConfigsNameGet(ctx context.Context, clusterId string, brokerId int32, name string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.BrokerConfigData, *net_http.Response, error) {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Unlock()

	if m.ClustersClusterIdBrokersBrokerIdConfigsNameGetFunc == nil {
		panic("mocker: ConfigsApi.ClustersClusterIdBrokersBrokerIdConfigsNameGetFunc is nil but ConfigsApi.ClustersClusterIdBrokersBrokerIdConfigsNameGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		BrokerId  int32
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		BrokerId:  brokerId,
		Name:      name,
	}

	m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameGet = append(m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameGet, call)

	return m.ClustersClusterIdBrokersBrokerIdConfigsNameGetFunc(ctx, clusterId, brokerId, name)
}

// ClustersClusterIdBrokersBrokerIdConfigsNameGetCalled returns true if ClustersClusterIdBrokersBrokerIdConfigsNameGet was called at least once.
func (m *ConfigsApi) ClustersClusterIdBrokersBrokerIdConfigsNameGetCalled() bool {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Unlock()

	return len(m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameGet) > 0
}

// ClustersClusterIdBrokersBrokerIdConfigsNameGetCalls returns the calls made to ClustersClusterIdBrokersBrokerIdConfigsNameGet.
func (m *ConfigsApi) ClustersClusterIdBrokersBrokerIdConfigsNameGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
	BrokerId  int32
	Name      string
} {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Unlock()

	return m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameGet
}

// ClustersClusterIdBrokersBrokerIdConfigsNamePut mocks base method by wrapping the associated func.
func (m *ConfigsApi) ClustersClusterIdBrokersBrokerIdConfigsNamePut(ctx context.Context, clusterId string, brokerId int32, name string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsNamePutOpts) (*net_http.Response, error) {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Unlock()

	if m.ClustersClusterIdBrokersBrokerIdConfigsNamePutFunc == nil {
		panic("mocker: ConfigsApi.ClustersClusterIdBrokersBrokerIdConfigsNamePutFunc is nil but ConfigsApi.ClustersClusterIdBrokersBrokerIdConfigsNamePut was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		BrokerId          int32
		Name              string
		LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsNamePutOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		BrokerId:          brokerId,
		Name:              name,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdBrokersBrokerIdConfigsNamePut = append(m.calls.ClustersClusterIdBrokersBrokerIdConfigsNamePut, call)

	return m.ClustersClusterIdBrokersBrokerIdConfigsNamePutFunc(ctx, clusterId, brokerId, name, localVarOptionals)
}

// ClustersClusterIdBrokersBrokerIdConfigsNamePutCalled returns true if ClustersClusterIdBrokersBrokerIdConfigsNamePut was called at least once.
func (m *ConfigsApi) ClustersClusterIdBrokersBrokerIdConfigsNamePutCalled() bool {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Unlock()

	return len(m.calls.ClustersClusterIdBrokersBrokerIdConfigsNamePut) > 0
}

// ClustersClusterIdBrokersBrokerIdConfigsNamePutCalls returns the calls made to ClustersClusterIdBrokersBrokerIdConfigsNamePut.
func (m *ConfigsApi) ClustersClusterIdBrokersBrokerIdConfigsNamePutCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	BrokerId          int32
	Name              string
	LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsNamePutOpts
} {
	m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Unlock()

	return m.calls.ClustersClusterIdBrokersBrokerIdConfigsNamePut
}

// ClustersClusterIdBrokersBrokerIdConfigsalterPost mocks base method by wrapping the associated func.
func (m *ConfigsApi) ClustersClusterIdBrokersBrokerIdConfigsalterPost(ctx context.Context, clusterId string, brokerId int32, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsalterPostOpts) (*net_http.Response, error) {
	m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Unlock()

	if m.ClustersClusterIdBrokersBrokerIdConfigsalterPostFunc == nil {
		panic("mocker: ConfigsApi.ClustersClusterIdBrokersBrokerIdConfigsalterPostFunc is nil but ConfigsApi.ClustersClusterIdBrokersBrokerIdConfigsalterPost was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		BrokerId          int32
		LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsalterPostOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		BrokerId:          brokerId,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdBrokersBrokerIdConfigsalterPost = append(m.calls.ClustersClusterIdBrokersBrokerIdConfigsalterPost, call)

	return m.ClustersClusterIdBrokersBrokerIdConfigsalterPostFunc(ctx, clusterId, brokerId, localVarOptionals)
}

// ClustersClusterIdBrokersBrokerIdConfigsalterPostCalled returns true if ClustersClusterIdBrokersBrokerIdConfigsalterPost was called at least once.
func (m *ConfigsApi) ClustersClusterIdBrokersBrokerIdConfigsalterPostCalled() bool {
	m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Unlock()

	return len(m.calls.ClustersClusterIdBrokersBrokerIdConfigsalterPost) > 0
}

// ClustersClusterIdBrokersBrokerIdConfigsalterPostCalls returns the calls made to ClustersClusterIdBrokersBrokerIdConfigsalterPost.
func (m *ConfigsApi) ClustersClusterIdBrokersBrokerIdConfigsalterPostCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	BrokerId          int32
	LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdBrokersBrokerIdConfigsalterPostOpts
} {
	m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Unlock()

	return m.calls.ClustersClusterIdBrokersBrokerIdConfigsalterPost
}

// ClustersClusterIdTopicsTopicNameConfigsGet mocks base method by wrapping the associated func.
func (m *ConfigsApi) ClustersClusterIdTopicsTopicNameConfigsGet(ctx context.Context, clusterId, topicName string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.TopicConfigDataList, *net_http.Response, error) {
	m.lockClustersClusterIdTopicsTopicNameConfigsGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNameConfigsGet.Unlock()

	if m.ClustersClusterIdTopicsTopicNameConfigsGetFunc == nil {
		panic("mocker: ConfigsApi.ClustersClusterIdTopicsTopicNameConfigsGetFunc is nil but ConfigsApi.ClustersClusterIdTopicsTopicNameConfigsGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
	}

	m.calls.ClustersClusterIdTopicsTopicNameConfigsGet = append(m.calls.ClustersClusterIdTopicsTopicNameConfigsGet, call)

	return m.ClustersClusterIdTopicsTopicNameConfigsGetFunc(ctx, clusterId, topicName)
}

// ClustersClusterIdTopicsTopicNameConfigsGetCalled returns true if ClustersClusterIdTopicsTopicNameConfigsGet was called at least once.
func (m *ConfigsApi) ClustersClusterIdTopicsTopicNameConfigsGetCalled() bool {
	m.lockClustersClusterIdTopicsTopicNameConfigsGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNameConfigsGet.Unlock()

	return len(m.calls.ClustersClusterIdTopicsTopicNameConfigsGet) > 0
}

// ClustersClusterIdTopicsTopicNameConfigsGetCalls returns the calls made to ClustersClusterIdTopicsTopicNameConfigsGet.
func (m *ConfigsApi) ClustersClusterIdTopicsTopicNameConfigsGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
} {
	m.lockClustersClusterIdTopicsTopicNameConfigsGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNameConfigsGet.Unlock()

	return m.calls.ClustersClusterIdTopicsTopicNameConfigsGet
}

// ClustersClusterIdTopicsTopicNameConfigsNameDelete mocks base method by wrapping the associated func.
func (m *ConfigsApi) ClustersClusterIdTopicsTopicNameConfigsNameDelete(ctx context.Context, clusterId, topicName, name string) (*net_http.Response, error) {
	m.lockClustersClusterIdTopicsTopicNameConfigsNameDelete.Lock()
	defer m.lockClustersClusterIdTopicsTopicNameConfigsNameDelete.Unlock()

	if m.ClustersClusterIdTopicsTopicNameConfigsNameDeleteFunc == nil {
		panic("mocker: ConfigsApi.ClustersClusterIdTopicsTopicNameConfigsNameDeleteFunc is nil but ConfigsApi.ClustersClusterIdTopicsTopicNameConfigsNameDelete was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
		Name:      name,
	}

	m.calls.ClustersClusterIdTopicsTopicNameConfigsNameDelete = append(m.calls.ClustersClusterIdTopicsTopicNameConfigsNameDelete, call)

	return m.ClustersClusterIdTopicsTopicNameConfigsNameDeleteFunc(ctx, clusterId, topicName, name)
}

// ClustersClusterIdTopicsTopicNameConfigsNameDeleteCalled returns true if ClustersClusterIdTopicsTopicNameConfigsNameDelete was called at least once.
func (m *ConfigsApi) ClustersClusterIdTopicsTopicNameConfigsNameDeleteCalled() bool {
	m.lockClustersClusterIdTopicsTopicNameConfigsNameDelete.Lock()
	defer m.lockClustersClusterIdTopicsTopicNameConfigsNameDelete.Unlock()

	return len(m.calls.ClustersClusterIdTopicsTopicNameConfigsNameDelete) > 0
}

// ClustersClusterIdTopicsTopicNameConfigsNameDeleteCalls returns the calls made to ClustersClusterIdTopicsTopicNameConfigsNameDelete.
func (m *ConfigsApi) ClustersClusterIdTopicsTopicNameConfigsNameDeleteCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
	Name      string
} {
	m.lockClustersClusterIdTopicsTopicNameConfigsNameDelete.Lock()
	defer m.lockClustersClusterIdTopicsTopicNameConfigsNameDelete.Unlock()

	return m.calls.ClustersClusterIdTopicsTopicNameConfigsNameDelete
}

// ClustersClusterIdTopicsTopicNameConfigsNameGet mocks base method by wrapping the associated func.
func (m *ConfigsApi) ClustersClusterIdTopicsTopicNameConfigsNameGet(ctx context.Context, clusterId, topicName, name string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.TopicConfigData, *net_http.Response, error) {
	m.lockClustersClusterIdTopicsTopicNameConfigsNameGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNameConfigsNameGet.Unlock()

	if m.ClustersClusterIdTopicsTopicNameConfigsNameGetFunc == nil {
		panic("mocker: ConfigsApi.ClustersClusterIdTopicsTopicNameConfigsNameGetFunc is nil but ConfigsApi.ClustersClusterIdTopicsTopicNameConfigsNameGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		TopicName string
		Name      string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		TopicName: topicName,
		Name:      name,
	}

	m.calls.ClustersClusterIdTopicsTopicNameConfigsNameGet = append(m.calls.ClustersClusterIdTopicsTopicNameConfigsNameGet, call)

	return m.ClustersClusterIdTopicsTopicNameConfigsNameGetFunc(ctx, clusterId, topicName, name)
}

// ClustersClusterIdTopicsTopicNameConfigsNameGetCalled returns true if ClustersClusterIdTopicsTopicNameConfigsNameGet was called at least once.
func (m *ConfigsApi) ClustersClusterIdTopicsTopicNameConfigsNameGetCalled() bool {
	m.lockClustersClusterIdTopicsTopicNameConfigsNameGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNameConfigsNameGet.Unlock()

	return len(m.calls.ClustersClusterIdTopicsTopicNameConfigsNameGet) > 0
}

// ClustersClusterIdTopicsTopicNameConfigsNameGetCalls returns the calls made to ClustersClusterIdTopicsTopicNameConfigsNameGet.
func (m *ConfigsApi) ClustersClusterIdTopicsTopicNameConfigsNameGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
	TopicName string
	Name      string
} {
	m.lockClustersClusterIdTopicsTopicNameConfigsNameGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNameConfigsNameGet.Unlock()

	return m.calls.ClustersClusterIdTopicsTopicNameConfigsNameGet
}

// ClustersClusterIdTopicsTopicNameConfigsNamePut mocks base method by wrapping the associated func.
func (m *ConfigsApi) ClustersClusterIdTopicsTopicNameConfigsNamePut(ctx context.Context, clusterId, topicName, name string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdTopicsTopicNameConfigsNamePutOpts) (*net_http.Response, error) {
	m.lockClustersClusterIdTopicsTopicNameConfigsNamePut.Lock()
	defer m.lockClustersClusterIdTopicsTopicNameConfigsNamePut.Unlock()

	if m.ClustersClusterIdTopicsTopicNameConfigsNamePutFunc == nil {
		panic("mocker: ConfigsApi.ClustersClusterIdTopicsTopicNameConfigsNamePutFunc is nil but ConfigsApi.ClustersClusterIdTopicsTopicNameConfigsNamePut was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		TopicName         string
		Name              string
		LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdTopicsTopicNameConfigsNamePutOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		TopicName:         topicName,
		Name:              name,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdTopicsTopicNameConfigsNamePut = append(m.calls.ClustersClusterIdTopicsTopicNameConfigsNamePut, call)

	return m.ClustersClusterIdTopicsTopicNameConfigsNamePutFunc(ctx, clusterId, topicName, name, localVarOptionals)
}

// ClustersClusterIdTopicsTopicNameConfigsNamePutCalled returns true if ClustersClusterIdTopicsTopicNameConfigsNamePut was called at least once.
func (m *ConfigsApi) ClustersClusterIdTopicsTopicNameConfigsNamePutCalled() bool {
	m.lockClustersClusterIdTopicsTopicNameConfigsNamePut.Lock()
	defer m.lockClustersClusterIdTopicsTopicNameConfigsNamePut.Unlock()

	return len(m.calls.ClustersClusterIdTopicsTopicNameConfigsNamePut) > 0
}

// ClustersClusterIdTopicsTopicNameConfigsNamePutCalls returns the calls made to ClustersClusterIdTopicsTopicNameConfigsNamePut.
func (m *ConfigsApi) ClustersClusterIdTopicsTopicNameConfigsNamePutCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	TopicName         string
	Name              string
	LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdTopicsTopicNameConfigsNamePutOpts
} {
	m.lockClustersClusterIdTopicsTopicNameConfigsNamePut.Lock()
	defer m.lockClustersClusterIdTopicsTopicNameConfigsNamePut.Unlock()

	return m.calls.ClustersClusterIdTopicsTopicNameConfigsNamePut
}

// ClustersClusterIdTopicsTopicNameConfigsalterPost mocks base method by wrapping the associated func.
func (m *ConfigsApi) ClustersClusterIdTopicsTopicNameConfigsalterPost(ctx context.Context, clusterId, topicName string, localVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdTopicsTopicNameConfigsalterPostOpts) (*net_http.Response, error) {
	m.lockClustersClusterIdTopicsTopicNameConfigsalterPost.Lock()
	defer m.lockClustersClusterIdTopicsTopicNameConfigsalterPost.Unlock()

	if m.ClustersClusterIdTopicsTopicNameConfigsalterPostFunc == nil {
		panic("mocker: ConfigsApi.ClustersClusterIdTopicsTopicNameConfigsalterPostFunc is nil but ConfigsApi.ClustersClusterIdTopicsTopicNameConfigsalterPost was called.")
	}

	call := struct {
		Ctx               context.Context
		ClusterId         string
		TopicName         string
		LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdTopicsTopicNameConfigsalterPostOpts
	}{
		Ctx:               ctx,
		ClusterId:         clusterId,
		TopicName:         topicName,
		LocalVarOptionals: localVarOptionals,
	}

	m.calls.ClustersClusterIdTopicsTopicNameConfigsalterPost = append(m.calls.ClustersClusterIdTopicsTopicNameConfigsalterPost, call)

	return m.ClustersClusterIdTopicsTopicNameConfigsalterPostFunc(ctx, clusterId, topicName, localVarOptionals)
}

// ClustersClusterIdTopicsTopicNameConfigsalterPostCalled returns true if ClustersClusterIdTopicsTopicNameConfigsalterPost was called at least once.
func (m *ConfigsApi) ClustersClusterIdTopicsTopicNameConfigsalterPostCalled() bool {
	m.lockClustersClusterIdTopicsTopicNameConfigsalterPost.Lock()
	defer m.lockClustersClusterIdTopicsTopicNameConfigsalterPost.Unlock()

	return len(m.calls.ClustersClusterIdTopicsTopicNameConfigsalterPost) > 0
}

// ClustersClusterIdTopicsTopicNameConfigsalterPostCalls returns the calls made to ClustersClusterIdTopicsTopicNameConfigsalterPost.
func (m *ConfigsApi) ClustersClusterIdTopicsTopicNameConfigsalterPostCalls() []struct {
	Ctx               context.Context
	ClusterId         string
	TopicName         string
	LocalVarOptionals *github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClustersClusterIdTopicsTopicNameConfigsalterPostOpts
} {
	m.lockClustersClusterIdTopicsTopicNameConfigsalterPost.Lock()
	defer m.lockClustersClusterIdTopicsTopicNameConfigsalterPost.Unlock()

	return m.calls.ClustersClusterIdTopicsTopicNameConfigsalterPost
}

// Reset resets the calls made to the mocked methods.
func (m *ConfigsApi) Reset() {
	m.lockClustersClusterIdBrokerConfigsGet.Lock()
	m.calls.ClustersClusterIdBrokerConfigsGet = nil
	m.lockClustersClusterIdBrokerConfigsGet.Unlock()
	m.lockClustersClusterIdBrokerConfigsNameDelete.Lock()
	m.calls.ClustersClusterIdBrokerConfigsNameDelete = nil
	m.lockClustersClusterIdBrokerConfigsNameDelete.Unlock()
	m.lockClustersClusterIdBrokerConfigsNameGet.Lock()
	m.calls.ClustersClusterIdBrokerConfigsNameGet = nil
	m.lockClustersClusterIdBrokerConfigsNameGet.Unlock()
	m.lockClustersClusterIdBrokerConfigsNamePut.Lock()
	m.calls.ClustersClusterIdBrokerConfigsNamePut = nil
	m.lockClustersClusterIdBrokerConfigsNamePut.Unlock()
	m.lockClustersClusterIdBrokerConfigsalterPost.Lock()
	m.calls.ClustersClusterIdBrokerConfigsalterPost = nil
	m.lockClustersClusterIdBrokerConfigsalterPost.Unlock()
	m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Lock()
	m.calls.ClustersClusterIdBrokersBrokerIdConfigsGet = nil
	m.lockClustersClusterIdBrokersBrokerIdConfigsGet.Unlock()
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Lock()
	m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameDelete = nil
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameDelete.Unlock()
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Lock()
	m.calls.ClustersClusterIdBrokersBrokerIdConfigsNameGet = nil
	m.lockClustersClusterIdBrokersBrokerIdConfigsNameGet.Unlock()
	m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Lock()
	m.calls.ClustersClusterIdBrokersBrokerIdConfigsNamePut = nil
	m.lockClustersClusterIdBrokersBrokerIdConfigsNamePut.Unlock()
	m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Lock()
	m.calls.ClustersClusterIdBrokersBrokerIdConfigsalterPost = nil
	m.lockClustersClusterIdBrokersBrokerIdConfigsalterPost.Unlock()
	m.lockClustersClusterIdTopicsTopicNameConfigsGet.Lock()
	m.calls.ClustersClusterIdTopicsTopicNameConfigsGet = nil
	m.lockClustersClusterIdTopicsTopicNameConfigsGet.Unlock()
	m.lockClustersClusterIdTopicsTopicNameConfigsNameDelete.Lock()
	m.calls.ClustersClusterIdTopicsTopicNameConfigsNameDelete = nil
	m.lockClustersClusterIdTopicsTopicNameConfigsNameDelete.Unlock()
	m.lockClustersClusterIdTopicsTopicNameConfigsNameGet.Lock()
	m.calls.ClustersClusterIdTopicsTopicNameConfigsNameGet = nil
	m.lockClustersClusterIdTopicsTopicNameConfigsNameGet.Unlock()
	m.lockClustersClusterIdTopicsTopicNameConfigsNamePut.Lock()
	m.calls.ClustersClusterIdTopicsTopicNameConfigsNamePut = nil
	m.lockClustersClusterIdTopicsTopicNameConfigsNamePut.Unlock()
	m.lockClustersClusterIdTopicsTopicNameConfigsalterPost.Lock()
	m.calls.ClustersClusterIdTopicsTopicNameConfigsalterPost = nil
	m.lockClustersClusterIdTopicsTopicNameConfigsalterPost.Unlock()
}
