// Copyright 2021 Confluent Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: ../kafka-rest-sdk-go/kafkarestv3/api_replica.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3 "github.com/confluentinc/kafka-rest-sdk-go/kafkarestv3"
)

// ReplicaApi is a mock of ReplicaApi interface
type ReplicaApi struct {
	lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet sync.Mutex
	ClustersClusterIdBrokersBrokerIdPartitionReplicasGetFunc func(ctx context.Context, clusterId string, brokerId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ReplicaDataList, *net_http.Response, error)

	lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet sync.Mutex
	ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGetFunc func(ctx context.Context, clusterId, topicName string, partitionId, brokerId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ReplicaData, *net_http.Response, error)

	lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet sync.Mutex
	ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGetFunc func(ctx context.Context, clusterId, topicName string, partitionId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ReplicaDataList, *net_http.Response, error)

	calls struct {
		ClustersClusterIdBrokersBrokerIdPartitionReplicasGet []struct {
			Ctx       context.Context
			ClusterId string
			BrokerId  int32
		}
		ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet []struct {
			Ctx         context.Context
			ClusterId   string
			TopicName   string
			PartitionId int32
			BrokerId    int32
		}
		ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet []struct {
			Ctx         context.Context
			ClusterId   string
			TopicName   string
			PartitionId int32
		}
	}
}

// ClustersClusterIdBrokersBrokerIdPartitionReplicasGet mocks base method by wrapping the associated func.
func (m *ReplicaApi) ClustersClusterIdBrokersBrokerIdPartitionReplicasGet(ctx context.Context, clusterId string, brokerId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ReplicaDataList, *net_http.Response, error) {
	m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Unlock()

	if m.ClustersClusterIdBrokersBrokerIdPartitionReplicasGetFunc == nil {
		panic("mocker: ReplicaApi.ClustersClusterIdBrokersBrokerIdPartitionReplicasGetFunc is nil but ReplicaApi.ClustersClusterIdBrokersBrokerIdPartitionReplicasGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
		BrokerId  int32
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
		BrokerId:  brokerId,
	}

	m.calls.ClustersClusterIdBrokersBrokerIdPartitionReplicasGet = append(m.calls.ClustersClusterIdBrokersBrokerIdPartitionReplicasGet, call)

	return m.ClustersClusterIdBrokersBrokerIdPartitionReplicasGetFunc(ctx, clusterId, brokerId)
}

// ClustersClusterIdBrokersBrokerIdPartitionReplicasGetCalled returns true if ClustersClusterIdBrokersBrokerIdPartitionReplicasGet was called at least once.
func (m *ReplicaApi) ClustersClusterIdBrokersBrokerIdPartitionReplicasGetCalled() bool {
	m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Unlock()

	return len(m.calls.ClustersClusterIdBrokersBrokerIdPartitionReplicasGet) > 0
}

// ClustersClusterIdBrokersBrokerIdPartitionReplicasGetCalls returns the calls made to ClustersClusterIdBrokersBrokerIdPartitionReplicasGet.
func (m *ReplicaApi) ClustersClusterIdBrokersBrokerIdPartitionReplicasGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
	BrokerId  int32
} {
	m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Lock()
	defer m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Unlock()

	return m.calls.ClustersClusterIdBrokersBrokerIdPartitionReplicasGet
}

// ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet mocks base method by wrapping the associated func.
func (m *ReplicaApi) ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet(ctx context.Context, clusterId, topicName string, partitionId, brokerId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ReplicaData, *net_http.Response, error) {
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet.Unlock()

	if m.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGetFunc == nil {
		panic("mocker: ReplicaApi.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGetFunc is nil but ReplicaApi.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet was called.")
	}

	call := struct {
		Ctx         context.Context
		ClusterId   string
		TopicName   string
		PartitionId int32
		BrokerId    int32
	}{
		Ctx:         ctx,
		ClusterId:   clusterId,
		TopicName:   topicName,
		PartitionId: partitionId,
		BrokerId:    brokerId,
	}

	m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet = append(m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet, call)

	return m.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGetFunc(ctx, clusterId, topicName, partitionId, brokerId)
}

// ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGetCalled returns true if ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet was called at least once.
func (m *ReplicaApi) ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGetCalled() bool {
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet.Unlock()

	return len(m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet) > 0
}

// ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGetCalls returns the calls made to ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet.
func (m *ReplicaApi) ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGetCalls() []struct {
	Ctx         context.Context
	ClusterId   string
	TopicName   string
	PartitionId int32
	BrokerId    int32
} {
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet.Unlock()

	return m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet
}

// ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet mocks base method by wrapping the associated func.
func (m *ReplicaApi) ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet(ctx context.Context, clusterId, topicName string, partitionId int32) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ReplicaDataList, *net_http.Response, error) {
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet.Unlock()

	if m.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGetFunc == nil {
		panic("mocker: ReplicaApi.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGetFunc is nil but ReplicaApi.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet was called.")
	}

	call := struct {
		Ctx         context.Context
		ClusterId   string
		TopicName   string
		PartitionId int32
	}{
		Ctx:         ctx,
		ClusterId:   clusterId,
		TopicName:   topicName,
		PartitionId: partitionId,
	}

	m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet = append(m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet, call)

	return m.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGetFunc(ctx, clusterId, topicName, partitionId)
}

// ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGetCalled returns true if ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet was called at least once.
func (m *ReplicaApi) ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGetCalled() bool {
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet.Unlock()

	return len(m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet) > 0
}

// ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGetCalls returns the calls made to ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet.
func (m *ReplicaApi) ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGetCalls() []struct {
	Ctx         context.Context
	ClusterId   string
	TopicName   string
	PartitionId int32
} {
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet.Lock()
	defer m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet.Unlock()

	return m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet
}

// Reset resets the calls made to the mocked methods.
func (m *ReplicaApi) Reset() {
	m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Lock()
	m.calls.ClustersClusterIdBrokersBrokerIdPartitionReplicasGet = nil
	m.lockClustersClusterIdBrokersBrokerIdPartitionReplicasGet.Unlock()
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet.Lock()
	m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet = nil
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasBrokerIdGet.Unlock()
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet.Lock()
	m.calls.ClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet = nil
	m.lockClustersClusterIdTopicsTopicNamePartitionsPartitionIdReplicasGet.Unlock()
}
