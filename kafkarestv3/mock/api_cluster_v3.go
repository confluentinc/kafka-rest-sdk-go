// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: ../kafka-rest-sdk-go/kafkarestv3/api_cluster_v3.go

package mock

import (
	context "context"
	net_http "net/http"
	sync "sync"

	github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3 "github.com/confluentinc/kafka-rest-sdk-go/kafkarestv3"
)

// ClusterV3Api is a mock of ClusterV3Api interface
type ClusterV3Api struct {
	lockClustersGet sync.Mutex
	ClustersGetFunc func(ctx context.Context) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClusterDataList, *net_http.Response, error)

	lockGetKafkaCluster sync.Mutex
	GetKafkaClusterFunc func(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClusterData, *net_http.Response, error)

	calls struct {
		ClustersGet []struct {
			Ctx context.Context
		}
		GetKafkaCluster []struct {
			Ctx       context.Context
			ClusterId string
		}
	}
}

// ClustersGet mocks base method by wrapping the associated func.
func (m *ClusterV3Api) ClustersGet(ctx context.Context) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClusterDataList, *net_http.Response, error) {
	m.lockClustersGet.Lock()
	defer m.lockClustersGet.Unlock()

	if m.ClustersGetFunc == nil {
		panic("mocker: ClusterV3Api.ClustersGetFunc is nil but ClusterV3Api.ClustersGet was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.ClustersGet = append(m.calls.ClustersGet, call)

	return m.ClustersGetFunc(ctx)
}

// ClustersGetCalled returns true if ClustersGet was called at least once.
func (m *ClusterV3Api) ClustersGetCalled() bool {
	m.lockClustersGet.Lock()
	defer m.lockClustersGet.Unlock()

	return len(m.calls.ClustersGet) > 0
}

// ClustersGetCalls returns the calls made to ClustersGet.
func (m *ClusterV3Api) ClustersGetCalls() []struct {
	Ctx context.Context
} {
	m.lockClustersGet.Lock()
	defer m.lockClustersGet.Unlock()

	return m.calls.ClustersGet
}

// GetKafkaCluster mocks base method by wrapping the associated func.
func (m *ClusterV3Api) GetKafkaCluster(ctx context.Context, clusterId string) (github_com_confluentinc_kafka_rest_sdk_go_kafkarestv3.ClusterData, *net_http.Response, error) {
	m.lockGetKafkaCluster.Lock()
	defer m.lockGetKafkaCluster.Unlock()

	if m.GetKafkaClusterFunc == nil {
		panic("mocker: ClusterV3Api.GetKafkaClusterFunc is nil but ClusterV3Api.GetKafkaCluster was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.GetKafkaCluster = append(m.calls.GetKafkaCluster, call)

	return m.GetKafkaClusterFunc(ctx, clusterId)
}

// GetKafkaClusterCalled returns true if GetKafkaCluster was called at least once.
func (m *ClusterV3Api) GetKafkaClusterCalled() bool {
	m.lockGetKafkaCluster.Lock()
	defer m.lockGetKafkaCluster.Unlock()

	return len(m.calls.GetKafkaCluster) > 0
}

// GetKafkaClusterCalls returns the calls made to GetKafkaCluster.
func (m *ClusterV3Api) GetKafkaClusterCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockGetKafkaCluster.Lock()
	defer m.lockGetKafkaCluster.Unlock()

	return m.calls.GetKafkaCluster
}

// Reset resets the calls made to the mocked methods.
func (m *ClusterV3Api) Reset() {
	m.lockClustersGet.Lock()
	m.calls.ClustersGet = nil
	m.lockClustersGet.Unlock()
	m.lockGetKafkaCluster.Lock()
	m.calls.GetKafkaCluster = nil
	m.lockGetKafkaCluster.Unlock()
}
