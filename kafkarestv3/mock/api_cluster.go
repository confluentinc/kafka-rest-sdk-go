// Code generated by mocker. DO NOT EDIT.
// github.com/travisjeffery/mocker
// Source: ../kafka-rest-sdk-go/kafkarestv3/api_cluster.go

package mock

import (
	command_line_arguments "command-line-arguments"
	context "context"
	net_http "net/http"
	sync "sync"
)

// ClusterApi is a mock of ClusterApi interface
type ClusterApi struct {
	lockClustersClusterIdGet sync.Mutex
	ClustersClusterIdGetFunc func(ctx context.Context, clusterId string) (command_line_arguments.ClusterData, *net_http.Response, error)

	lockClustersGet sync.Mutex
	ClustersGetFunc func(ctx context.Context) (command_line_arguments.ClusterDataList, *net_http.Response, error)

	calls struct {
		ClustersClusterIdGet []struct {
			Ctx       context.Context
			ClusterId string
		}
		ClustersGet []struct {
			Ctx context.Context
		}
	}
}

// ClustersClusterIdGet mocks base method by wrapping the associated func.
func (m *ClusterApi) ClustersClusterIdGet(ctx context.Context, clusterId string) (command_line_arguments.ClusterData, *net_http.Response, error) {
	m.lockClustersClusterIdGet.Lock()
	defer m.lockClustersClusterIdGet.Unlock()

	if m.ClustersClusterIdGetFunc == nil {
		panic("mocker: ClusterApi.ClustersClusterIdGetFunc is nil but ClusterApi.ClustersClusterIdGet was called.")
	}

	call := struct {
		Ctx       context.Context
		ClusterId string
	}{
		Ctx:       ctx,
		ClusterId: clusterId,
	}

	m.calls.ClustersClusterIdGet = append(m.calls.ClustersClusterIdGet, call)

	return m.ClustersClusterIdGetFunc(ctx, clusterId)
}

// ClustersClusterIdGetCalled returns true if ClustersClusterIdGet was called at least once.
func (m *ClusterApi) ClustersClusterIdGetCalled() bool {
	m.lockClustersClusterIdGet.Lock()
	defer m.lockClustersClusterIdGet.Unlock()

	return len(m.calls.ClustersClusterIdGet) > 0
}

// ClustersClusterIdGetCalls returns the calls made to ClustersClusterIdGet.
func (m *ClusterApi) ClustersClusterIdGetCalls() []struct {
	Ctx       context.Context
	ClusterId string
} {
	m.lockClustersClusterIdGet.Lock()
	defer m.lockClustersClusterIdGet.Unlock()

	return m.calls.ClustersClusterIdGet
}

// ClustersGet mocks base method by wrapping the associated func.
func (m *ClusterApi) ClustersGet(ctx context.Context) (command_line_arguments.ClusterDataList, *net_http.Response, error) {
	m.lockClustersGet.Lock()
	defer m.lockClustersGet.Unlock()

	if m.ClustersGetFunc == nil {
		panic("mocker: ClusterApi.ClustersGetFunc is nil but ClusterApi.ClustersGet was called.")
	}

	call := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}

	m.calls.ClustersGet = append(m.calls.ClustersGet, call)

	return m.ClustersGetFunc(ctx)
}

// ClustersGetCalled returns true if ClustersGet was called at least once.
func (m *ClusterApi) ClustersGetCalled() bool {
	m.lockClustersGet.Lock()
	defer m.lockClustersGet.Unlock()

	return len(m.calls.ClustersGet) > 0
}

// ClustersGetCalls returns the calls made to ClustersGet.
func (m *ClusterApi) ClustersGetCalls() []struct {
	Ctx context.Context
} {
	m.lockClustersGet.Lock()
	defer m.lockClustersGet.Unlock()

	return m.calls.ClustersGet
}

// Reset resets the calls made to the mocked methods.
func (m *ClusterApi) Reset() {
	m.lockClustersClusterIdGet.Lock()
	m.calls.ClustersClusterIdGet = nil
	m.lockClustersClusterIdGet.Unlock()
	m.lockClustersGet.Lock()
	m.calls.ClustersGet = nil
	m.lockClustersGet.Unlock()
}
